# SPDX-FileCopyrightText: Copyright (C) 2018-2024 Uwe Klotz <uwedotklotzatgmaildotcom> et al.
# SPDX-License-Identifier: AGPL-3.0-or-later

# Please specify precise dependency versions in Cargo.toml:
# <https://users.rust-lang.org/t/psa-please-specify-precise-dependency-versions-in-cargo-toml/71277>

[workspace]
members = [".", "crates/*", "file-collection-app/", "websrv/"]

[workspace.package]
version = "0.8.0"
edition = "2021"
rust-version = "1.78"
repository = "https://gitlab.com/uklotzde/aoide-rs"
license = "AGPL-3.0-or-later"

[workspace.dependencies]
# Main crate
aoide = { version = "=0.8.0", path = "." }
# Local sub-crates
aoide-backend-embedded = { version = "=0.8.0", path = "crates/backend-embedded" }
aoide-backend-webapi-json = { version = "=0.8.0", path = "crates/backend-webapi-json" }
aoide-core = { version = "=0.8.0", path = "crates/core" }
aoide-core-api = { version = "=0.8.0", path = "crates/core-api" }
aoide-core-api-json = { version = "=0.8.0", path = "crates/core-api-json" }
aoide-core-json = { version = "=0.8.0", path = "crates/core-json" }
aoide-desktop-app = { version = "=0.8.0", path = "crates/desktop-app" }
aoide-media-file = { version = "=0.8.0", path = "crates/media-file" }
aoide-repo = { version = "=0.8.0", path = "crates/repo" }
aoide-repo-sqlite = { version = "=0.8.0", path = "crates/repo-sqlite" }
aoide-search-index-tantivy = { version = "=0.8.0", path = "crates/search-index-tantivy" }
aoide-storage-sqlite = { version = "=0.8.0", path = "crates/storage-sqlite" }
aoide-usecases = { version = "=0.8.0", path = "crates/usecases" }
aoide-usecases-sqlite = { version = "=0.8.0", path = "crates/usecases-sqlite" }
aoide-websrv-warp-sqlite = { version = "=0.8.0", path = "crates/websrv-warp-sqlite" }

[workspace.lints.rust]
# Opt-in for allowed-by-default lints (in alphabetical order)
# See also: <https://doc.rust-lang.org/rustc/lints>
future_incompatible = "warn"
let_underscore = "warn"
missing_debug_implementations = "warn"
rust_2018_idioms = "warn"
rust_2021_compatibility = "warn"
unreachable_pub = "warn"
unsafe_code = "warn"
unused = "warn"

[workspace.lints.clippy]
pedantic = "warn"

# Use unified function syntax to avoid confusion with referenced type.
clone_on_ref_ptr = "warn"

# Declare as `const` whenever possible.
missing_const_for_fn = "warn"

# Prefer mod.rs style for self-contained module directories.
self_named_module_files = "warn"

# Repetitions of module/type names occur frequently when using many
# modules for keeping the size of the source files handy. Often
# types have the same name as their parent module.
module_name_repetitions = "allow"

# Repeating the type name in `Default::default()` expressions
# is not needed as long as the context is obvious.
default_trait_access = "allow"

# The error types returned should be self-explanatory.
missing_errors_doc = "allow"

# Using wildcard imports intentionally is acceptable.
wildcard_imports = "allow"

# Often inevitable, e.g. `collection_uid` and `collection_id` often appear within the same context.
similar_names = "allow"

# TODO: Review each occurrence and allow them one by one.
cast_possible_truncation = "allow"
cast_precision_loss = "allow"
cast_sign_loss = "allow"

[package]
name = "aoide"
description = "aoide - Music library management"
keywords = ["music"]
repository.workspace = true
version.workspace = true
license.workspace = true
edition.workspace = true
rust-version.workspace = true
include = [
  "assets/logo/",
  "crates/",
  "!crates/backend-webapi-json",
  "!crates/client",
  "!crates/websrv-warp-sqlite",
  "src/",
  "LICENSES/",
  "README.md",
]

[lints]
workspace = true

[dependencies]
aoide-backend-embedded = { workspace = true, optional = true }
aoide-core.workspace = true
aoide-core-api = { workspace = true, optional = true }
aoide-core-api-json = { workspace = true, optional = true }
aoide-core-json = { workspace = true, optional = true }
aoide-desktop-app = { workspace = true, optional = true }
aoide-media-file = { workspace = true, optional = true }
aoide-repo = { workspace = true, optional = true }
aoide-repo-sqlite = { workspace = true, optional = true }
aoide-search-index-tantivy = { workspace = true, optional = true }
aoide-storage-sqlite = { workspace = true, optional = true }
aoide-usecases = { workspace = true, optional = true }
aoide-usecases-sqlite = { workspace = true, optional = true }

[features]
# Portable features
default = []
api = ["dep:aoide-core-api"]

# Portable backend features
repo = ["api", "dep:aoide-repo"]
usecases = ["api", "repo", "dep:aoide-usecases"]

# Native features (for embedded backends)
media-file = ["dep:aoide-media-file", "aoide-usecases?/media-file"]
sqlite = [
  "usecases",
  "dep:aoide-repo-sqlite",
  "dep:aoide-storage-sqlite",
  "dep:aoide-usecases-sqlite",
]
sqlite-bundled = ["sqlite", "aoide-storage-sqlite/sqlite-bundled"]
tokio = ["aoide-backend-embedded?/tokio"]
backend-embedded = ["media-file", "sqlite", "dep:aoide-backend-embedded"]
desktop-app = ["backend-embedded", "dep:aoide-desktop-app"]
async-file-dialog = ["aoide-desktop-app?/async-file-dialog"]

# JSON features
json = ["aoide-core/serde", "dep:aoide-core-json"]
json-api = ["api", "json", "dep:aoide-core-api-json"]
json-frontend = ["json-api", "aoide-core-api-json/frontend"]
json-backend = ["json-api", "aoide-core-api-json/backend"]
json-schema = [
  "json",
  "aoide-core/json-schema",
  "aoide-core-api-json?/json-schema",
  "aoide-core-json?/json-schema",
]

# JavaScript/WASM features
js = ["aoide-core/js"]
frontend-js = ["json-frontend", "js"]

# Tantivy (experimental)
tantivy = ["dep:aoide-search-index-tantivy", "aoide-backend-embedded?/tantivy"]

[profile.dev]
opt-level = 2
split-debuginfo = "unpacked"
panic = "abort"

[profile.test]
inherits = "dev"

[profile.release]
opt-level = 3
lto = "thin"
strip = "debuginfo"
panic = "abort"

[profile.profiling]
inherits = "release"
# Keep debug symbols for profiling -> results in huge binary!
debug = true

[profile.production]
inherits = "release"
lto = true
codegen-units = 1
strip = true
