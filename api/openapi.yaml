openapi: 3.0.0
info:
  version: 0.0.1
  title: aoide
  license:
    name: AGPLv3
servers:
  - url: 'http://aoide.org'
paths:
  /collections:
    get:
      summary: List collections
      description: >
        List all collections that have recently been created/modified.
      operationId: listCollections
      tags:
        - collections
      parameters:
        - $ref: '#/components/parameters/withCollectionOptions'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: >
            An array of collection entities sorted in descending order of the corresponding time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new collection
      operationId: createCollection
      tags:
        - collections
      requestBody:
        description: >
          Properties of the new collection.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '201':
          description: >
            The header of the newly created collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/collections/{collectionUid}':
    get:
      summary: Load a collection
      description: >
        Load a collection entity referenced by its UID.
      operationId: loadCollection
      tags:
        - collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/withCollectionOptions'
      responses:
        '200':
          description: >
            The loaded collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntity'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a collection
      description: >
        Update a collection entity after validating that the provided `header` matches that of the current entity (optimistic locking).
      operationId: updateCollection
      tags:
        - collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        description: >
          A collection entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionEntity'
      responses:
        '200':
          description: >
            The header of the updated collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a collection
      operationId: deleteCollection
      tags:
        - collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tracks':
    get:
      summary: List tracks
      description: >
        List all tracks that have either recently been created/modified if no collection is specified or that have recently been added to the given collection.
      operationId: listTracks
      tags:
        - tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: >
            An array of track entities sorted in descending order of the corresponding time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new track
      operationId: createTrack
      tags:
        - tracks
      responses:
        '201':
          description: >
            The header of the newly created track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tracks/{trackUid}':
    get:
      summary: Load a track
      description: >
        Load a track entity referenced by its UID.
      operationId: loadTrack
      tags:
        - tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '200':
          description: >
            The loaded track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackEntity'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a track
      description: >
        Update a track entity after validating that the provided `header` matches that of the current entity (optimistic locking).
      operationId: updateTrack
      tags:
        - tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      requestBody:
        description: >
          A track entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackEntity'
      responses:
        '200':
          description: >
            The header of the updated track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a track
      operationId: deleteTrack
      tags:
        - tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tracks/locate':
    post:
      summary: Locate tracks
      description: >
        Locate tracks according to their resource URI.
      operationId: locateTracks
      tags:
        - tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocateTracksParams'
      responses:
        '200':
          description: >
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tracks/replace':
    post:
      summary: Replace tracks by URI
      description: >
        Replace tracks according to their resource URI. Optionally the URI lookup can be restricted to a single collection.
      operationId: locateTracks
      tags:
        - tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceTracksParams'
      responses:
        '200':
          description: >
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplaceTracksResults'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tracks/search':
    post:
      summary: Search tracks
      description: >
        Search tracks matching various filter conditions and sort the results.
      operationId: searchTracks
      tags:
        - tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTracksParams'
      responses:
        '200':
          description: >
            An array of matching tracks in the requested order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tags':
    get:
      summary: List tags
      description: >
        List term frequencies for selected facets, i.e. grouped by facet and term with the average score and a total count. Terms are listed in descending order of their total count. The results can optionally be restricted to a single collection. Pagination is applied separately for each of the selected facets.
      operationId: listTagFrequencies
      tags:
        - tags
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/withTagFacetList'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: >
            Tag frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoredTagCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tags/facets':
    get:
      summary: List tag facets
      description: >
        List frequencies of selected tag facets, i.e. grouped by facet with a total count. Facets are listed in descending order of their total count. The results can optionally be restricted to a single collection. Pagination is applied separately for each of the selected facets.
      operationId: listTagFacets
      tags:
        - tags
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/withTagFacetList'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: >
            Tag facet frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagFacetCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/fields':
    get:
      summary: List (string) fields
      description: >
        List frequencies of selected fields, i.e. grouped by field and value with a total count. Field values are listed in descending order of their total count. The results can optionally be restricted to a single collection. Pagination is applied separately for each of the selected fields.
      operationId: listFields
      tags:
        - fields
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/withFieldList'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: >
            Field frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StringFieldCount'
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
components:
  responses:
    201Created:
      description: >
        The resource has been created.
    204NoContent:
      description: >
        The request has been processed, no response available.
    400BadRequest:
      description: >
        The request with the provided parameters was invalid.
    404NotFound:
      description: >
        The specified resource was not found.
    500InternalServerError:
      description: >
        The server failed to process the request.
  parameters:
    paginationOffset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: >
        Number of items to skip before returning the results or 0 if missing.
    paginationLimit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: >
        Maximum number of items to return.
    collectionUidParam:
      name: collectionUid
      in: query
      required: false
      description: >
        An optional UID for selecting a single collection or none for all collections.
      schema:
        $ref: '#/components/schemas/EntityUid'
    collectionUidPath:
      name: collectionUid
      in: path
      required: true
      description: >
        The UID of the collection.
      schema:
        $ref: '#/components/schemas/EntityUid'
    trackUidPath:
      name: trackUid
      in: path
      required: true
      description: >
        The UID of the track.
      schema:
        $ref: '#/components/schemas/EntityUid'
    withCollectionOptions:
      name: with
      in: query
      required: false
      schema:
        type: string
      description: >
        Comma-separated list of boolean options:
          * `track-stats` - Include track statistics
    withFieldList:
      name: with
      in: query
      description: >-
        Comma-separated list of field selectors:
          * `album-artist`
          * `album-title`
          * `media-type`
          * `track-artist`
          * `track-title`
      required: false
      schema:
        type: string
      example: 'media-type,track-artist,album-title'
    withTagFacetList:
      name: with
      in: query
      description: >-
        Comma-separated list of case-insensitive strings for selecting a subset of tags by any of the given facets (alternation). An empty list or a list containing an empty item (= leading/trainling comma or 2 subsequent commas) selects all tags without a facet (= null). If this parameter is missing all tags are selected.
      required: false
      schema:
        type: string
      example: ',genre,mood'
  schemas:
    Actor:
      required:
        - name
      properties:
        name:
          type: string
        prio:
          type: string
          enum:
            - summary
            - primary
            - secondary
          description: >
            Optional priority that defaults to `summary` if missing
              * `summary` - the default display string
              * `primary` - primary actor(s)
              * `secondary` - secondary actor(s)
        role:
          type: string
          enum:
            - artist
            - arranger
            - composer
            - conductor
            - djmixer
            - engineer
            - lyricist
            - mixer
            - performer
            - producer
            - publisher
            - remixer
            - writer
    Album:
      properties:
        refs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalReference'
        actors:
          type: array
          items:
            $ref: '#/components/schemas/Actor'
        titles:
          type: array
          items:
            $ref: '#/components/schemas/Title'
        compilation:
          type: boolean
          description: >
            Indicates if this album is a compilation with various artists.
    AudioContent:
      properties:
        duration:
          $ref: '#/components/schemas/Duration'
        channels:
          $ref: '#/components/schemas/Channels'
        samplerate:
          $ref: '#/components/schemas/SampleRate'
        bitrate:
          $ref: '#/components/schemas/BitRate'
    BitRate:
      required:
        - bps
      properties:
        bps:
          type: integer
          format: int32
          minimum: 1
          example: 256000
    Channels:
      required:
        - count
      properties:
        count:
          type: integer
          format: int32
          minimum: 1
          example: 2
    Collection:
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
    CollectionStats:
      properties:
        tracks:
          $ref: '#/components/schemas/CollectionTrackStats'
    CollectionTrackStats:
      required:
        - totalCount
        - totalDuration
      properties:
        totalCount:
          type: integer
          format: int64
          minimum: 0
        totalDuration:
          $ref: '#/components/schemas/Duration'
    CollectionEntity:
      required:
        - header
        - body
      properties:
        header:
          $ref: '#/components/schemas/EntityHeader'
        body:
          $ref: '#/components/schemas/Collection'
        stats:
          $ref: '#/components/schemas/CollectionStats'
    ConditionModifier:
      type: string
      enum: [ not ]
    Duration:
      required:
        - ms
      properties:
        ms:
          type: integer
          format: int64
          minimum: 0
    EntityUid:
      description: A unique entity identifier (UID).
      type: string
      minLength: 32
      maxLength: 32
      example: '0AcZjgLUx5bFAd5EaJ42RTET1n2S_oxn'
    EntityRevisionOrdinal:
      type: integer
      format: int64
      minimum: 1
      example: 3
    EntityRevisionTimestamp:
      type: string
      format: date-time
    EntityRevision:
      description: >
        Tuple of 2 elements containing an ordinal and a timestamp.
      type: array
      minItems: 2
      maxItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityRevisionOrdinal'
          - $ref: '#/components/schemas/EntityRevisionTimestamp'
    EntityHeader:
      properties:
        uid:
          $ref: '#/components/schemas/EntityUid'
        revision:
          $ref: '#/components/schemas/EntityRevision'
    ExternalReference:
      type: string
      minLength: 1
      description: >
        Stringified external reference, e.g. a URL.
      example: 'http://musicbrainz.org/track/d878c95a-8a6b-3be6-b6df-7d720a480625'
    FilterModifier:
      type: string
      enum: [ complement ]
    IndexCount:
      description: >
        Identifies the number of the current item and the number of total items. Both values are optional and might be `null`.
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: integer
        minimum: 0
    LocateTracksParams:
      properties:
        uri:
          $ref: '#/components/schemas/StringCondition'
    MediaType:
      type: string
      minLength: 1
      example: 'audio/mpeg'
    NumericCondition:
      description: >
        A numeric condition is specified by exactly one of the defined properties.
      properties:
        less-than:
          $ref: '#/components/schemas/NumericConditionParams'
        greater-than:
          $ref: '#/components/schemas/NumericConditionParams'
        equal-to:
          $ref: '#/components/schemas/NumericConditionParams'
    NumericConditionParams:
      required:
        - value
      properties:
        value:
          type: number
        modifier:
          $ref: '#/components/schemas/ConditionModifier'
    NumericField:
      type: string
      enum:
        - bitrate-bps
        - channels-count
        - duration-ms
        - keysig-code
        - samplerate-hz
        - tempo-bpm
        - timesig-upper
        - timesig-lower
    NumericFilter:
      properties:
        field:
          $ref: '#/components/schemas/NumericField'
        condition:
          $ref: '#/components/schemas/NumericCondition'
        modifier:
          $ref: '#/components/schemas/FilterModifier'
    Release:
      properties:
        refs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalReference'
        releaseAt:
          type: string
          format: date-time
        releaseBy:
          type: string
        copyright:
          type: string
        licenses:
          type: array
          items:
            type: string
    ReplacementMode:
      type: string
      enum:
        - update-only
        - update-or-create
    ReplaceTracksParams:
      properties:
        mode:
          $ref: '#/components/schemas/ReplacementMode'
        replacements:
          type: array
          items:
            $ref: '#/components/schemas/TrackReplacement'
    ReplaceTracksResults:
      properties:
        created:
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        updated:
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        skipped:
          description: >
            Unchanged tracks, i.e. that don't need to be updated.
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        rejected:
          description: >
            Informational messages about ambiguous or inconsistent tracks.
          type: array
          items:
            type: string
        discarded:
          description: >
            Informational messages about nonexistent tracks that need to be created.
          type: array
          items:
            type: string
    SampleRate:
      required:
        - hz
      properties:
        hz:
          type: integer
          format: int32
          minimum: 1
          example: 44100
    ScoredTag:
      type: array
      description: >
        Tuple of 3 elements containing a score value, a term, and an optional (= nullable) facet.
      items:
        oneOf:
          - $ref: '#/components/schemas/ScoreValue'
          - $ref: '#/components/schemas/TagTerm'
          - $ref: '#/components/schemas/TagFacet'
    ScoredTagCount:
      description: >
        Tag with an average score across all occurrences and the total number of occurrences.
      required:
        - tag
        - count
      properties:
        tag:
          $ref: '#/components/schemas/ScoredTag'
        count:
          $ref: '#/components/schemas/TagCount'
    ScoreValue:
      type: number
      description: >
        Normalized score value between 0 and 1.
      example: 0.83
      minimum: 0
      maximum: 1
    SearchTracksParams:
      properties:
        phraseFilter:
          $ref: '#/components/schemas/PhraseFilter'
        numericFilters:
          type: array
          items:
            $ref: '#/components/schemas/NumericFilter'
        tagFilters:
          type: array
          items:
            $ref: '#/components/schemas/TagFilter'
        ordering:
          type: array
          items:
            $ref: '#/components/schemas/TrackSort'
    PhraseField:
      type: string
      enum:
        - album-artist
        - album-title
        - comments
        - media-type
        - source
        - track-artist
        - track-title
      description: >
            * `source` - percent-decoded URI
            * `comments` - all comments, i.e. independent of the owner
    PhraseFilter:
      properties:
        query:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/PhraseField'
        modifier:
          $ref: '#/components/schemas/FilterModifier'
    SortDirection:
      type: string
      enum:
        - asc
        - desc
    StringCondition:
      description: >
        A string condition is specified by exactly one of the defined properties.
      properties:
        starts-with:
          $ref: '#/components/schemas/StringConditionParams'
        ends-with:
          $ref: '#/components/schemas/StringConditionParams'
        contains:
          $ref: '#/components/schemas/StringConditionParams'
        matches:
          $ref: '#/components/schemas/StringConditionParams'
    StringConditionParams:
      required:
        - value
      properties:
        value:
          type: string
        modifier:
          $ref: '#/components/schemas/ConditionModifier'
    StringCount:
      required:
        - value
        - count
      properties:
        value:
          type: string
        count:
          type: integer
          minimum: 0
          example: 235
    StringField:
      type: string
      enum:
        - album-artist
        - album-title
        - media-type
        - track-artist
        - track-title
    StringFieldCount:
      required:
        - field
        - counts
      properties:
        field:
          $ref: '#/components/schemas/StringField'
        counts:
          type: array
          items:
            $ref: '#/components/schemas/StringCount'
    TagCount:
      type: integer
      description: >
        Total number of occurrences.
      minimum: 0
      example: 1746
    TagFacet:
      type: string
      description: >
        Non-empty, lowercase, string that defines the (optional) facet of tag.
      example: 'genre'
      minLength: 1
    TagFacetCount:
      description: >
        Optional tag facet with the total number of occurrences.
      required:
        - count
      properties:
        facet:
          $ref: '#/components/schemas/TagFacet'
        count:
          $ref: '#/components/schemas/TagCount'
    TagFilter:
      properties:
        score:
          $ref: '#/components/schemas/NumericCondition'
        term:
          $ref: '#/components/schemas/StringCondition'
        facet:
          type: string
        modifier:
          $ref: '#/components/schemas/FilterModifier'
    TagTerm:
      type: string
      description: >
        Non-empty string that defines the content of tag.
      example: 'Hip Hop/Rap'
      minLength: 1
    Title:
      required:
        - name
      properties:
        name:
          type: string
        level:
          type: string
          enum:
            - main
            - sub
            - wrk
            - mvn
          description: >
            Optional level that defaults to `main` if missing
              * `main` - default display string
              * `sub` - a subtitle
              * `wrk` - a work title for classical music
              * `mvn` - a movement title for classical music
        lang:
          type: string
    Track:
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/TrackResource'
        refs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalReference'
        release:
          $ref: '#/components/schemas/Release'
        album:
          $ref: '#/components/schemas/Album'
        actors:
          type: array
          items:
            $ref: '#/components/schemas/Actor'
        titles:
          type: array
          items:
            $ref: '#/components/schemas/Title'
        trackNumbers:
          $ref: '#/components/schemas/IndexCount'
        discNumbers:
          $ref: '#/components/schemas/IndexCount'
        movementNumbers:
          $ref: '#/components/schemas/IndexCount'
    TrackCollection:
      required:
        - uid
        - since
      properties:
        uid:
          $ref: '#/components/schemas/EntityUid'
        since:
          type: string
          format: date-time
    TrackColor:
      required:
        - code
      properties:
        code:
          type: string
          example: "#FF808080"
    TrackEntity:
      required:
        - header
        - body
      properties:
        header:
          $ref: '#/components/schemas/EntityHeader'
        body:
          $ref: '#/components/schemas/Track'
    TrackReplacement:
      properties:
        uri:
          type: string
          description: >
            The URI for looking up the existing track (if any) that gets replaced.
        track:
          $ref: '#/components/schemas/Track'
    TrackResource:
      properties:
        collection:
          $ref: '#/components/schemas/TrackCollection'
        source:
          $ref: '#/components/schemas/TrackSource'
        color:
          $ref: '#/components/schemas/TrackColor'
        playCounter:
          type: integer
          minimum: 0
    TrackSortField:
      type: string
      enum:
        - album-artist
        - album-title
        - in-collection-since
        - last-revisioned-at
        - track-artist
        - track-title
    TrackSort:
      properties:
        field:
          $ref: '#/components/schemas/TrackSortField'
        direction:
          $ref: '#/components/schemas/SortDirection'
    TrackSource:
      properties:
        uri:
          type: string
        synchronization:
          $ref: '#/components/schemas/TrackSynchronization'
        mediaType:
          $ref: '#/components/schemas/MediaType'
        audioContent:
          $ref: '#/components/schemas/AudioContent'
    TrackSynchronization:
      required:
        - revision
        - when
      properties:
        revision:
          $ref: '#/components/schemas/EntityRevision'
        when:
          type: string
          format: date-time
