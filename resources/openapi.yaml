openapi: 3.0.2
info:
  version: 0.0.5
  title: aoide
  description: Music library management service.
  license:
    name: AGPL-3.0-or-later
    url: 'https://www.gnu.org/licenses/agpl-3.0.html'
servers:
  - url: 'http://[::1]:7878/'
    description: Local development server
paths:
  /collections:
    get:
      summary: List collections
      description: |
        List all collections that have recently been created/modified.
      operationId: listCollections
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: |
            An array of collection entities sorted in descending order of the
            corresponding time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new collection
      operationId: createCollection
      tags:
        - Collections
      requestBody:
        description: |
          Properties of the new collection.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '201':
          description: |
            The header of the newly created collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/collections/{collectionUid}':
    get:
      summary: Load a collection
      description: |
        Load a collection entity referenced by its UID.
      operationId: loadCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/withCollectionQuery'
      responses:
        '200':
          description: |
            The loaded collection entity, optionally with additional statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntityWithStats'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a collection
      description: |
        Update a collection entity after validating that the provided `header`
        matches that of the current entity (optimistic locking).
      operationId: updateCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        description: |
          A collection entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionEntity'
      responses:
        '200':
          description: |
            The header of the updated collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a collection
      operationId: deleteCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks:
    get:
      summary: List tracks
      description: |
        List all tracks that have either recently been created/modified if no
        collection is specified or that have recently been added to the given
        collection.
      operationId: listTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: |
            An array of track entities sorted in descending order of the
            corresponding time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new track
      operationId: createTrack
      tags:
        - Tracks
      responses:
        '201':
          description: |
            The header of the newly created track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tracks/{trackUid}':
    get:
      summary: Load a track
      description: |
        Load a track entity referenced by its UID.
      operationId: loadTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '200':
          description: |
            The loaded track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackEntity'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a track
      description: |
        Update a track entity after validating that the provided `header`
        matches that of the current entity (optimistic locking).
      operationId: updateTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      requestBody:
        description: |
          A track entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackEntity'
      responses:
        '200':
          description: |
            The header of the updated track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a track
      operationId: deleteTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/locate:
    post:
      summary: Locate tracks by URI
      description: |
        Locate tracks according to their (percent-encoded) source URI.
        Optionally the URI lookup can be restricted to a single collection.
      operationId: locateTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocateTracksParams'
      responses:
        '200':
          description: |
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/replace:
    post:
      summary: Replace tracks by URI
      description: |
        Replace tracks with a new revision by locating them through their
        (percent-encoded) source URI. Optionally the URI lookup can be
        restricted to a single collection.
      operationId: replaceTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceTracksParams'
      responses:
        '200':
          description: |
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplacedTracks'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/purge:
    post:
      summary: Purge track sources and tracks by URI
      description: |
        Purge all track sources that equal one of the given URIs.
        If the purged source was the last source of a track the
        entire track is deleted.
      operationId: purgeTrackSources
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurgeTracksParams'
      responses:
        '204':
          description: |
            Track sources and tracks have been purged.
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/search:
    post:
      summary: Search tracks
      description: |
        Search tracks by evaluating various filter conditions and sort the
        results.
      operationId: searchTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTracksParams'
      responses:
        '200':
          description: |
            An array of matching tracks in the requested order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/albums/count:
    post:
      summary: Count tracks per album
      description: >
        List albums (title, artist, year) together with their corresponding number of tracks.
      operationId: countAlbumsOfTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTrackAlbumsParams'
      responses:
        '200':
          description: |
            Album track statistics.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackAlbumCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/tags/count:
    post:
      summary: Count tracks per tag
      description: |
        Count the number of occurrences and avg. score of tags
        discriminated by their facet and label. Optionally the
        evaluation can be restricted to a single collection.
      operationId: countTagsOfTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTagsParams'
      responses:
        '200':
          description: |
            Tag frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/tags/facets/count:
    post:
      summary: Count tracks per tag facet
      description: |
        Count the number of occurrences of tag facets. Optionally
        the evaluation can be restricted to a single collection.
      operationId: countTagFacetsOfTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTagFacetsParams'
      responses:
        '200':
          description: |
            Tag facet frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagFacetCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /shutdown:
    post:
      summary: Shut down gracefully
      operationId: shutdown
      tags:
        - Shutdown
      responses:
        '202':
          description: |
            Shutdown has been initiated.
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          description: |
            Failed to forward the request.
components:
  responses:
    201Created:
      description: |
        The resource has been created.
    204NoContent:
      description: |
        The request has been processed, no response available.
    400BadRequest:
      description: |
        The request with the provided parameters was invalid.
    404NotFound:
      description: |
        The specified resource was not found.
    500InternalServerError:
      description: |
        The server failed to process the request.
  parameters:
    paginationOffset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: |
        Number of items to skip before returning the results or 0 if missing.
    paginationLimit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: >
        Maximum number of items to return or unlimited if missing. When this
        parameter

        is specified its value is evaluated and applied, i.e. a value of 0 will
        result

        in an empty set of returned items.
    collectionUidParam:
      name: collectionUid
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/EntityUid'
      description: |
        An optional UID for selecting a single collection or none for all
        collections.
    collectionUidPath:
      name: collectionUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/EntityUid'
      description: |
        The UID of the collection.
    trackUidPath:
      name: trackUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/EntityUid'
      description: |
        The UID of the track.
    withCollectionQuery:
      name: with
      in: query
      required: false
      schema:
        type: string
      description: |
        Comma-separated list of boolean options:
          * `track-stats` - Include track statistics
  schemas:
    Actor:
      properties:
        name:
          $ref: '#/components/schemas/ActorName'
        role:
          $ref: '#/components/schemas/ActorRole'
        precedence:
          $ref: '#/components/schemas/ActorPrecedence'
      required:
        - name
      description: |
        Some actor naming examples:
          * summary = 'Michael Jackson'
          * summary = 'Bill Medley & Jennifer Warnes', primary = 'Bill Medley', primary = 'Jennifer Warnes'
          * summary = 'Nick Jonas ft. Anne-Marie & Mike Posner', primary = 'Nick Jonas', secondary = 'Anne-Marie', secondary = 'Mike Posner'
    ActorName:
      type: string
      minLength: 1
      example: The Beatles
    ActorPrecedence:
      type: string
      enum:
        - summary
        - primary
        - secondary
      description: |
        Optional precedence that defaults to `summary` if missing:
          * `summary` - the default display string
          * `primary` - primary actor(s)
          * `secondary` - secondary actor(s)
    ActorRole:
      type: string
      enum:
        - artist
        - arranger
        - composer
        - conductor
        - djmixer
        - engineer
        - lyricist
        - mixer
        - performer
        - producer
        - publisher
        - remixer
        - writer
      description: |
        Optional role that defaults to `artist` if missing
    Album:
      properties:
        titles:
          type: array
          items:
            $ref: '#/components/schemas/Title'
        actors:
          type: array
          items:
            $ref: '#/components/schemas/Actor'
        compilation:
          type: boolean
          description: |
            Indicates whether this album is a compilation with various artists.
    AudioContent:
      properties:
        channels:
          $ref: '#/components/schemas/Channels'
        duration:
          $ref: '#/components/schemas/DurationMs'
        sampleRate:
          $ref: '#/components/schemas/SampleRateHz'
        bitRate:
          $ref: '#/components/schemas/BitRateBps'
        loudness:
          $ref: '#/components/schemas/LoudnessLufs'
        encoder:
          $ref: '#/components/schemas/Encoder'
    BitRateBps:
      type: integer
      format: int32
      minimum: 0
      example: 256000
      description: |
        The bit rate in bits per second (bps).
    Channels:
      properties:
        count:
          $ref: '#/components/schemas/ChannelCount'
        layout:
          $ref: '#/components/schemas/ChannelLayout'
      required:
        - count
    ChannelCount:
      type: integer
      minimum: 0
      maximum: 65535
      example: 2
    ChannelLayout:
      type: string
      enum:
        - mono
        - dual-mono
        - stereo
    Collection:
      properties:
        name:
          type: string
        desc:
          type: string
      required:
        - name
    CollectionStats:
      properties:
        tracks:
          $ref: '#/components/schemas/CollectionTrackStats'
    CollectionTrackStats:
      properties:
        totalCount:
          $ref: '#/components/schemas/TotalCount'
      required:
        - totalCount
    CollectionEntity:
      properties:
        hdr:
          $ref: '#/components/schemas/EntityHeader'
        body:
          $ref: '#/components/schemas/Collection'
      required:
        - header
        - body
    CollectionEntityWithStats:
      properties:
        hdr:
          $ref: '#/components/schemas/EntityHeader'
        body:
          $ref: '#/components/schemas/Collection'
        stats:
          $ref: '#/components/schemas/CollectionStats'
      required:
        - hdr
        - body
    Year:
      type: integer
      format: int32
      minimum: -32768
      maximum: 32767
      example: 2019
      description: |
        A year number.
    Color:
      type: string
      minLength: 9
      maxLength: 9
      example: '#FF808080'
      description: |
        A hexadecimal color code `#AARRGGBB` with 8 bits per channel.
    ConditionModifier:
      type: string
      enum:
        - not
    DurationMs:
      type: number
      minimum: 0
      example: 210387.576
    PositionMs:
      type: number
      example: 210387.576
    Encoder:
      properties:
        name:
          type: string
        settings:
          type: string
    EntityUid:
      type: string
      minLength: 32
      maxLength: 33
      example: 4L9v84JeigpHxEdtVHUkL6JASD92sDwdW
      description: A globally unique identifier (UID) for entities in base-58 encoding.
    EntityRevisionOrdinal:
      type: integer
      format: int64
      minimum: 1
      example: 3
    EntityRevisionTimeStamp:
      type: integer
      format: int64
      example: 1552823952261838
    EntityRevision:
      type: array
      minItems: 2
      maxItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityRevisionOrdinal'
          - $ref: '#/components/schemas/EntityRevisionTimeStamp'
      description: |
        Tuple of 2 elements containing an ordinal and a timestamp.
    EntityHeader:
      properties:
        uid:
          $ref: '#/components/schemas/EntityUid'
        rev:
          $ref: '#/components/schemas/EntityRevision'
    FilterModifier:
      type: string
      enum:
        - complement
    IndexCount:
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: integer
        format: int32
        minimum: 0
      description: >
        Identifies the number of the current item and the number of total items.
        Both values are optional and might be `null`.
    KeyCode:
      type: integer
      minimum: 1
      maximum: 24
      example: 1
      description: |
        The key signature is denoted by a code with one of the following values:
          * 1 = C maj
          * 2 = A min
          * 3 = G maj
          * 4 = E min
          * ...
          * 23 = F maj
          * 24 = D min
    LanguageCode:
      type: string
      minLength: 2
      maxLength: 3
      example: eng
      description: |
        A language code according to ISO 639-1/2/3.
    LocateTracksParams:
      properties:
        uri:
          $ref: '#/components/schemas/StringPredicate'
    LoudnessLufs:
      type: number
      example: -13.4239
      description: >
        Loudness is measured in "Loudness Units relative to Full Scale" (LUFS)
        with 1 LU = 1 dB according to ITU-R BS.1770. EBU R128 proposes a target
        level of -23 LUFS while the ReplayGain v2 specification (RG2) proposes
        -18 LUFS for achieving similar perceptive results compared to ReplayGain
        v1 (RG1).
    MediaType:
      type: string
      minLength: 1
      example: audio/mpeg
      description: |
        A media type string according to RFC 6838.
    NumericComparator:
      type: string
      enum:
        - less-than
        - greater-than
        - equal-to
      description: |
        Numeric comparison operators.
    NumericPredicateLessThan:
      properties:
        lt:
          type: number
      required:
        - lt
    NumericPredicateLessOrEqual:
      properties:
        le:
          type: number
      required:
        - le
    NumericPredicateGreaterThan:
      properties:
        gt:
          type: number
      required:
        - gt
    NumericPredicateGreaterOrEqual:
      properties:
        ge:
          type: number
      required:
        - ge
    NumericPredicateEqual:
      properties:
        eq:
          type: number
    NumericPredicateNotEqual:
      properties:
        ne:
          type: number
    NumericPredicate:
      oneOf:
        - $ref: '#/components/schemas/NumericPredicateLessThan'
        - $ref: '#/components/schemas/NumericPredicateLessOrEqual'
        - $ref: '#/components/schemas/NumericPredicateGreaterThan'
        - $ref: '#/components/schemas/NumericPredicateGreaterOrEqual'
        - $ref: '#/components/schemas/NumericPredicateEqual'
        - $ref: '#/components/schemas/NumericPredicateNotEqual'
    NumericField:
      type: string
      enum:
        - audioBitRate
        - audioChannelCount
        - audioDuration
        - audioLoudness
        - audioSampleRate
        - musicTempo
        - musicKey
        - releaseYear
    NumericFilter:
      properties:
        field:
          $ref: '#/components/schemas/NumericField'
        value:
          $ref: '#/components/schemas/NumericPredicate'
      required:
        - field
        - value
    PhraseFilter:
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/StringField'
          description: If no fields are specified all available string fields
            are matched.
        terms:
          type: array
          items:
            type: string
          description: >
            The terms are concatenated with wildcards, and filtered
            using case-insensitive "contains" semantics for each of the
            selected fields, e.g. "Pa la bell" or "tt ll" both match "Patti
            LaBelle". An empty array matches both empty and missing/null
            fields.
      required:
        - terms
      description: |
        Matches a sequence of terms on any of the given string fields.
        A match for at least one of the fields is sufficient.
    PurgeTracksParams:
      type: array
      items:
        $ref: '#/components/schemas/Uri'
    Release:
      properties:
        copyright:
          type: string
        licenses:
          type: array
          items:
            type: string
        releasedAt:
          $ref: '#/components/schemas/TimeStamp'
        releasedBy:
          type: string
    ReplacementMode:
      type: string
      enum:
        - update-only
        - update-or-create
      description: |
        Operational mode for resolving conflicts during replacement
          * `update-only` - only update existing entities and discard new entities that need to be created
          * `update-or-create` - create a new entity if no existing entity could be found/located
    ReplaceTracksParams:
      properties:
        mode:
          $ref: '#/components/schemas/ReplacementMode'
        replacements:
          type: array
          items:
            $ref: '#/components/schemas/TrackReplacement'
    ReplacedTracks:
      properties:
        created:
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        updated:
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        skipped:
          description: |
            Unchanged tracks that don't need to be updated.
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        rejected:
          description: |
            Informational messages about ambiguous or inconsistent tracks.
          type: array
          items:
            type: string
        discarded:
          description: |
            Informational messages about nonexistent tracks that need to be
            created.
          type: array
          items:
            type: string
    SampleRateHz:
      type: integer
      format: int32
      minimum: 0
      example: 44100
      description: |
        The sample rate in Hertz (Hz).
    PlainTag:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TagLabel'
          - $ref: '#/components/schemas/ScoreValue'
      description: |
        Tuple of 2 elements containing a label and a score.
    FacetedTag:
      type: array
      minLength: 3
      maxLength: 3
      items:
        oneOf:
          - $ref: '#/components/schemas/TagFacet'
          - $ref: '#/components/schemas/TagLabel'
          - $ref: '#/components/schemas/ScoreValue'
      description: |
        Tuple of 3 elements containing a facet, an optional/nullable label, and a score value.
    TagCount:
      properties:
        facet:
          $ref: '#/components/schemas/TagFacet'
        label:
          $ref: '#/components/schemas/TagLabel'
        avgScore:
          $ref: '#/components/schemas/ScoreValue'
        count:
          $ref: '#/components/schemas/TotalCount'
      required:
        - avgScore
        - count
      description: >
        Selective tag properties (facet, label) with an average score among
        all occurrences and the total number of occurrences.
    ScoreValue:
      type: number
      minimum: 0
      maximum: 1
      example: 0.83
      description: |
        Normalized score value between 0 and 1.
    TrackAlbumCount:
      properties:
        title:
          $ref: '#/components/schemas/TitleName'
        artist:
          $ref: '#/components/schemas/ActorName'
        releaseYear:
          $ref: '#/components/schemas/Year'
        count:
          $ref: '#/components/schemas/TotalCount'
      required:
        - title
        - count
    TrackSearchFilterNode:
      oneOf:
        - $ref: '#/components/schemas/TrackSearchPhraseFilterNode'
        - $ref: '#/components/schemas/TrackSearchNumericFilterNode'
        - $ref: '#/components/schemas/TrackSearchTagFilterNode'
        - $ref: '#/components/schemas/TrackSearchMarkerFilterNode'
        - $ref: '#/components/schemas/TrackSearchAllFilterNode'
        - $ref: '#/components/schemas/TrackSearchAnyFilterNode'
        - $ref: '#/components/schemas/TrackSearchNotFilterNode'
    TrackSearchPhraseFilterNode:
      properties:
        phrase:
          $ref: '#/components/schemas/PhraseFilter'
      required:
        - phrase
    TrackSearchNumericFilterNode:
      properties:
        numeric:
          $ref: '#/components/schemas/NumericFilter'
      required:
        - numeric
    TrackSearchTagFilterNode:
      properties:
        tag:
          $ref: '#/components/schemas/TagFilter'
      required:
        - tag
    TrackSearchMarkerFilterNode:
      properties:
        tag:
          $ref: '#/components/schemas/MarkerFilter'
      required:
        - tag
    TrackSearchAllFilterNode:
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - all
    TrackSearchAnyFilterNode:
      properties:
        any:
          type: array
          items:
            $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - any
    TrackSearchNotFilterNode:
      properties:
        not:
          $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - not
    SearchTracksParams:
      properties:
        filter:
          $ref: '#/components/schemas/TrackSearchFilterNode'
        ordering:
          type: array
          items:
            $ref: '#/components/schemas/TrackSortOrder'
    CountTrackAlbumsParams:
      properties:
        minReleaseYear:
          $ref: '#/components/schemas/Year'
        maxReleaseYear:
          $ref: '#/components/schemas/Year'
        ordering:
          type: array
          items:
            $ref: '#/components/schemas/TrackSortOrder'
      description: >
        Albums can be filtered by release year (inclusive).
        Results can be ordered by album title, album artist, and release year.
    CountTagsParams:
      properties:
        facets:
          type: array
          items:
            $ref: '#/components/schemas/TagFacet'
          description: |
            Selects a subset of tags per facet. An empty array excludes
            all faceted tags whereas a missing/null array includes all
            faceted tags!
          example: ['genre', 'comment']
        includeNonFacetedTags:
          type: boolean
          default: false
          description: |
            Applies the query to all non-faceted tags with no facet
            and just a label. Each distinct label will be scored and
            counted.
    CountTagFacetsParams:
      properties:
        facets:
          type: array
          items:
            $ref: '#/components/schemas/TagFacet'
          description: |
            Selects a subset of tags per facet. An empty array excludes
            all faceted tags whereas a missing/null array includes all
            faceted tags!
          example: ['genre', 'comment']
    SortDirection:
      type: string
      enum:
        - asc
        - dsc
      description: |
        Direction for sorting results.
          * `asc` - ascending
          * `dsc` - descending
    StringPredicate:
      oneOf:
        - $ref: '#/components/schemas/StringPredicateStartsWith'
        - $ref: '#/components/schemas/StringPredicateStartsNotWith'
        - $ref: '#/components/schemas/StringPredicateEndsWith'
        - $ref: '#/components/schemas/StringPredicateEndsNotWith'
        - $ref: '#/components/schemas/StringPredicateContains'
        - $ref: '#/components/schemas/StringPredicateContainsNot'
        - $ref: '#/components/schemas/StringPredicateMatches'
        - $ref: '#/components/schemas/StringPredicateMatchesNot'
        - $ref: '#/components/schemas/StringPredicateEquals'
        - $ref: '#/components/schemas/StringPredicateEqualsNot'
    StringPredicateStartsWith:
      properties:
        startsWith:
          type: string
      description: Matches the head of a string (case-insensitive)
    StringPredicateStartsNotWith:
      properties:
        startsNotWith:
          type: string
      description: Mismatches the head of a string (case-insensitive)
    StringPredicateEndsWith:
      properties:
        endsWith:
          type: string
      description: Matches the tail of a string (case-insensitive)
    StringPredicateEndsNotWith:
      properties:
        endsNotWith:
          type: string
      description: Mismatches the tail of a string (case-insensitive)
    StringPredicateContains:
      properties:
        contains:
          type: string
      description: Matches the middle of the string with arbitrary head/tail (case-insensitive)
    StringPredicateContainsNot:
      properties:
        containsNot:
          type: string
      description: Mismatches the middle of the string with arbitrary head/tail (case-insensitive)
    StringPredicateMatches:
      properties:
        matches:
          type: string
      description: Matches the whole string (case-insensitive)
    StringPredicateMatchesNot:
      properties:
        matchesNot:
          type: string
      description: Mismatches the whole string (case-insensitive)
    StringPredicateEquals:
      properties:
        equals:
          type: string
      description: Exact match (case-sensitive)
    StringPredicateEqualsNot:
      properties:
        equals:
          type: string
      description: Exact mismatch (case-sensitive)
    StringTotalCount:
      properties:
        value:
          type: string
        count:
          $ref: '#/components/schemas/TotalCount'
      required:
        - value
        - count
    StringField:
      type: string
      enum:
        - sourceUri
        - contentType
        - trackTitle
        - trackArtist
        - trackComposer
        - albumTitle
        - albumArtist
      description: |
        Selectable fields, including
          * `uri` - percent-decoded URI
          * `contentType` - media (MIME) type
          * ...
    StringFieldCount:
      properties:
        field:
          $ref: '#/components/schemas/StringField'
        counts:
          type: array
          items:
            $ref: '#/components/schemas/StringTotalCount'
      required:
        - field
        - counts
    TagFacet:
      type: string
      minLength: 1
      example: genre
      description: |
        Non-empty, lowercase, string that defines the facet of tag.
        Facets must also not contain any whitespace characters.
    TagFacetCount:
      properties:
        facet:
          $ref: '#/components/schemas/TagFacet'
        count:
          $ref: '#/components/schemas/TotalCount'
      required:
        - facet
        - count
      description: |
        Tag facet with the total number of occurrences.
    TagFilter:
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        facets:
          type: array
          items:
            $ref: '#/components/schemas/TagFacet'
          description: >
            A non-empty array will match any of the given facets.
            An empty array will only match unfaceted tags, i.e. tags
            without a facet. A missing/null array will match any tags,
            both with or without a facet.
        label:
          $ref: '#/components/schemas/StringPredicate'
        score:
          $ref: '#/components/schemas/NumericPredicate'
    MarkerFilter:
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        label:
          $ref: '#/components/schemas/StringPredicate'
    TagLabel:
      type: string
      minLength: 1
      example: Hip Hop/Rap
      description: |
        Non-empty string that defines the textual content of the tag.
    TempoBpm:
      type: number
      minimum: 0
      example: 110.67
      description: |
        The tempo measured in `beats per minute` (bpm).
    TimeSignature:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TimeSignatureTop'
          - $ref: '#/components/schemas/TimeSignatureBottom'
      description: >
        Tuple of 2 elements containing the top and bottom values of the time
        signature.
    BeatNumber:
      type: integer
      minimum: 1
      maximum: 65535
      example: 1
      description: >
        The beat 1..n in a bar.
    TimeSignatureTop:
      type: integer
      minimum: 1
      maximum: 65535
      example: 3
      description: >
        The top number of the time signature that denotes the number of beats in
        each measure or bar.
    TimeSignatureBottom:
      type: integer
      minimum: 1
      maximum: 65535
      example: 4
      description: >
        The bottom number of the time signature that denotes which type of note
        is getting the beat.
    TimeStamp:
      type: string
      format: date-time
      example: '2018-06-10T12:19:50.758Z'
    Title:
      properties:
        name:
          $ref: '#/components/schemas/TitleName'
        level:
          $ref: '#/components/schemas/TitleLevel'
        lang:
          $ref: '#/components/schemas/LanguageCode'
      required:
        - name
    TitleName:
      type: string
      minLength: 1
      example: Yellow Submarine
    TitleLevel:
      type: string
      enum:
        - main
        - sub
        - wrk
        - mvn
      description: |
        Optional level that defaults to `main` if missing
          * `main` - default display string
          * `sub` - a subtitle
          * `wrk` - a work title for classical music
          * `mvn` - a movement title for classical music
    TotalCount:
      type: integer
      format: int64
      minimum: 0
      example: 1746
      description: |
        Total number of occurrences.
    Tags:
      properties:
        plain:
          type: array
          items:
            $ref: '#/components/schemas/PlainTag'
        faceted:
          type: array
          items:
            $ref: '#/components/schemas/FacetedTag'
    Track:
      properties:
        collections:
          type: array
          items:
            $ref: '#/components/schemas/TrackCollection'
        sources:
          type: array
          items:
            $ref: '#/components/schemas/TrackSource'
        titles:
          type: array
          items:
            $ref: '#/components/schemas/Title'
        actors:
          type: array
          items:
            $ref: '#/components/schemas/Actor'
        album:
          $ref: '#/components/schemas/Album'
        release:
          $ref: '#/components/schemas/Release'
        discNumbers:
          $ref: '#/components/schemas/IndexCount'
        trackNumbers:
          $ref: '#/components/schemas/IndexCount'
        movementNumbers:
          $ref: '#/components/schemas/IndexCount'
        tags:
          $ref: '#/components/schemas/Tags'
        positionMarkers:
          type: array
          items:
            $ref: '#/components/schemas/PositionMarker'
        beatMarkers:
          type: array
          items:
            $ref: '#/components/schemas/BeatMarker'
          description: |
            All beat markers must be sorted by their non-overlapping positions.
        keyMarkers:
          type: array
          items:
            $ref: '#/components/schemas/KeyMarker'
          description: |
            All key markers must be sorted by their non-overlapping positions.
        locks:
          type: array
          items:
            $ref: '#/components/schemas/TrackLock'
    TrackCollection:
      properties:
        uid:
          $ref: '#/components/schemas/EntityUid'
        since:
          $ref: '#/components/schemas/TimeStamp'
        color:
          $ref: '#/components/schemas/Color'
        playCount:
          type: integer
          format: int64
          minimum: 0
      required:
        - uid
        - since
    TrackEntity:
      properties:
        hdr:
          $ref: '#/components/schemas/EntityHeader'
        body:
          $ref: '#/components/schemas/Track'
      required:
        - header
        - body
    TrackLock:
      type: string
      enum:
        - loudness
        - beats
        - keys
    PositionMarkerType:
      type: string
      enum:
        - cue
        - hot-cue
        - intro
        - outro
        - section
        - loop
        - sample
      description: >
        * `cue` - singular start/cue point that marks the initial position when loading a track

        * `hot-cue` - custom start/cue points in a track

        * `intro` - singular intro section (or point) of a track (forward only)

        * `outro` - singular outro section (or point) of a track (forward only)

        * `section` - custom sections (or points) without predefined semantics (forward only)

        * `loop` - sections that are played as loops (forward or backward)

        * `sample` - sections that are played as samples (forward or backward)
    PositionMarker:
      properties:
        type:
          $ref: '#/components/schemas/PositionMarkerType'
        start:
          $ref: '#/components/schemas/PositionMs'
        end:
          $ref: '#/components/schemas/PositionMs'
        number:
          type: integer
          format: int32
        label:
          type: string
        color:
          $ref: '#/components/schemas/Color'
      required:
        - type
      description: >
        Marker to identify points (either start or end) or sections (both start
        and end) within a track
    BeatMarker:
      properties:
        start:
          $ref: '#/components/schemas/PositionMs'
        end:
          $ref: '#/components/schemas/PositionMs'
        tempo:
          $ref: '#/components/schemas/TempoBpm'
        timing:
          $ref: '#/components/schemas/TimeSignature'
        beat:
          $ref: '#/components/schemas/BeatNumber'
      required:
        - start
      description: >
        Section of a beat grid with uniform tempo and timiming). Either
        tempo or timing is required. If the end position is missing the
        section ends with the start of the following marker or at the
        end of the track. The beat number must fit into the time signature.
    KeyMarker:
      properties:
        start:
          $ref: '#/components/schemas/PositionMs'
        end:
          $ref: '#/components/schemas/PositionMs'
        key:
          $ref: '#/components/schemas/KeyCode'
      required:
        - start
        - key
      description: >
        Section with a uniform musical key signature. If the end position
        is missing the section ends with the start of the following marker
        or at the end of the track.
    TrackReplacement:
      properties:
        uri:
          $ref: '#/components/schemas/Uri'
        track:
          $ref: '#/components/schemas/Track'
      required:
        - uri
        - track
      description: |
        The URI is used for looking up the existing track (if any) that gets
        replaced.
    TrackSortField:
      type: string
      enum:
        - inCollectionSince
        - lastRevisionedAt
        - trackTitle
        - trackArtist
        - albumTitle
        - albumArtist
        - releaseYear
        - musicTempo
    TrackSortOrder:
      properties:
        field:
          $ref: '#/components/schemas/TrackSortField'
        direction:
          $ref: '#/components/schemas/SortDirection'
    TrackSource:
      properties:
        uri:
          $ref: '#/components/schemas/Uri'
        contentType:
          $ref: '#/components/schemas/MediaType'
        audioContent:
          $ref: '#/components/schemas/AudioContent'
    Uri:
      type: string
      minLength: 1
      example: >-
        file:///home/user/Music/album%20artist/album%20title/01%20the%20first%20track.mp3
      description: |
        A percent-encoded URI.
