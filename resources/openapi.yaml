openapi: 3.0.0
info:
  version: 0.0.1
  title: aoide
  license:
    name: AGPLv3
servers:
  - url: 'http://aoide.org'
paths:
  /collections:
    get:
      summary: List collections
      description: |
        List all collections that have recently been created/modified.
      operationId: listCollections
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: |
            An array of collection entities sorted in descending order of the
            corresponding time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new collection
      operationId: createCollection
      tags:
        - Collections
      requestBody:
        description: |
          Properties of the new collection.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '201':
          description: |
            The header of the newly created collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/collections/{collectionUid}':
    get:
      summary: Load a collection
      description: |
        Load a collection entity referenced by its UID.
      operationId: loadCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/withCollectionOptions'
      responses:
        '200':
          description: |
            The loaded collection entity, optionally with additional statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntityWithStats'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a collection
      description: |
        Update a collection entity after validating that the provided `header`
        matches that of the current entity (optimistic locking).
      operationId: updateCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        description: |
          A collection entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionEntity'
      responses:
        '200':
          description: |
            The header of the updated collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a collection
      operationId: deleteCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks:
    get:
      summary: List tracks
      description: |
        List all tracks that have either recently been created/modified if no
        collection is specified or that have recently been added to the given
        collection.
      operationId: listTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: |
            An array of track entities sorted in descending order of the
            corresponding time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new track
      operationId: createTrack
      tags:
        - Tracks
      responses:
        '201':
          description: |
            The header of the newly created track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tracks/{trackUid}':
    get:
      summary: Load a track
      description: |
        Load a track entity referenced by its UID.
      operationId: loadTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '200':
          description: |
            The loaded track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackEntity'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a track
      description: |
        Update a track entity after validating that the provided `header`
        matches that of the current entity (optimistic locking).
      operationId: updateTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      requestBody:
        description: |
          A track entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackEntity'
      responses:
        '200':
          description: |
            The header of the updated track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a track
      operationId: deleteTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/locate:
    post:
      summary: Locate tracks by URI
      description: |
        Locate tracks according to their (percent-encoded) source URI.
        Optionally the URI lookup can be restricted to a single collection.
      operationId: locateTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocateTracksParams'
      responses:
        '200':
          description: |
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/replace:
    post:
      summary: Replace tracks by URI
      description: |
        Replace tracks with a new revision by locating them through their
        (percent-encoded) source URI. Optionally the URI lookup can be
        restricted to a single collection.
      operationId: locateTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceTracksParams'
      responses:
        '200':
          description: |
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplacedTracks'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/search:
    post:
      summary: Search tracks
      description: |
        Search tracks by evaluating various filter conditions and sort the
        results.
      operationId: searchTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTracksParams'
      responses:
        '200':
          description: |
            An array of matching tracks in the requested order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/tags:
    get:
      summary: List tags
      description: |
        List term frequencies of tags for selected (or all) facets. Results are
        provided as tags with an average score, listed in descending order of
        their total count. Optionally the evaluation can be restricted to a
        single collection.
      operationId: listTagFrequencies
      tags:
        - Track Tags
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/withTagFacetList'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: |
            Tag frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoredTotalCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/tags/facets:
    get:
      summary: List tag facets
      description: |
        List frequencies for selected (or all) tag facets in descending order of
        their total count. Optionally the evaluation can be restricted to a
        single collection.
      operationId: listTagFacets
      tags:
        - Track Tags
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/withTagFacetList'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: |
            Tag facet frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagFacetCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/fields:
    get:
      summary: List (string) fields
      description: |
        List frequencies of values for selected (string) fields. The results are
        grouped by field and pagination is applied separately for each field.
        Field values are listed in descending order of their total count.
        Optionally the results can be restricted to a single collection. 
      operationId: listFields
      tags:
        - Track Fields
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/withFieldList'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: |
            Field frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StringFieldCount'
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
components:
  responses:
    201Created:
      description: |
        The resource has been created.
    204NoContent:
      description: |
        The request has been processed, no response available.
    400BadRequest:
      description: |
        The request with the provided parameters was invalid.
    404NotFound:
      description: |
        The specified resource was not found.
    500InternalServerError:
      description: |
        The server failed to process the request.
  parameters:
    paginationOffset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: |
        Number of items to skip before returning the results or 0 if missing.
    paginationLimit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: |
        Maximum number of items to return or unlimited if missing.
    collectionUidParam:
      name: collectionUid
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/EntityUid'
      description: |
        An optional UID for selecting a single collection or none for all
        collections.
    collectionUidPath:
      name: collectionUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/EntityUid'
      description: |
        The UID of the collection.
    trackUidPath:
      name: trackUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/EntityUid'
      description: |
        The UID of the track.
    withCollectionOptions:
      name: with
      in: query
      required: false
      schema:
        type: string
      description: |
        Comma-separated list of boolean options:
          * `track-stats` - Include track statistics
    withFieldList:
      name: with
      in: query
      required: false
      schema:
        type: string
      example: 'media-type,track-artist,album-title'
      description: |
        Comma-separated list of field selectors:
          * `album-artist`
          * `album-title`
          * `media-type`
          * `track-artist`
          * `track-title`
    withTagFacetList:
      name: with
      in: query
      required: false
      schema:
        type: string
      example: ',genre,mood'
      description: |
        Comma-separated list of case-insensitive strings for selecting a subset
        of tags by any of the given facets (alternation). An empty list or a
        list containing an empty item (= leading/trainling comma or 2 subsequent
        commas) selects all tags without a facet (= null). If this parameter is
        missing all tags are selected.
  schemas:
    Actor:
      properties:
        name:
          type: string
          minLength: 1
        role:
          $ref: '#/components/schemas/ActorRole'
        precedence:
          $ref: '#/components/schemas/ActorPrecedence'
      required:
        - name
      description: |
        Some actor naming examples:
          * summary = 'Michael Jackson'
          * summary = 'Bill Medley & Jennifer Warnes', primary = 'Bill Medley', primary = 'Jennifer Warnes'
          * summary = 'Nick Jonas ft. Anne-Marie & Mike Posner', primary = 'Nick Jonas', secondary = 'Anne-Marie', secondary = 'Mike Posner'
    ActorPrecedence:
      type: string
      enum:
        - summary
        - primary
        - secondary
      description: |
        Optional precedence that defaults to `summary` if missing:
          * `summary` - the default display string
          * `primary` - primary actor(s)
          * `secondary` - secondary actor(s)
    ActorRole:
      type: string
      enum:
        - artist
        - arranger
        - composer
        - conductor
        - djmixer
        - engineer
        - lyricist
        - mixer
        - performer
        - producer
        - publisher
        - remixer
        - writer
      description: |
        Optional role that defaults to `artist` if missing
    Album:
      properties:
        actors:
          type: array
          items:
            $ref: '#/components/schemas/Actor'
        compilation:
          type: boolean
          description: |
            Indicates whether this album is a compilation with various artists.
        titles:
          type: array
          items:
            $ref: '#/components/schemas/Title'
        xrefs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalReference'
    AudioContent:
      properties:
        channels:
          $ref: '#/components/schemas/Channels'
        duration_ms:
          $ref: '#/components/schemas/DurationMs'
        samplerate:
          $ref: '#/components/schemas/SampleRate'
        bitrate:
          $ref: '#/components/schemas/BitRate'
    BitRate:
      properties:
        bps:
          type: integer
          format: int32
          minimum: 1
          example: 256000
      required:
        - bps
    Channels:
      properties:
        count:
          $ref: '#/components/schemas/ChannelCount'
        layout:
          $ref: '#/components/schemas/ChannelLayout'
      required:
        - count
    ChannelCount:
      type: integer
      format: int32
      minimum: 1
      example: 2
    ChannelLayout:
      type: string
      enum:
        - mono
        - dual-mono
        - stereo
      example: 'stereo'
    Collection:
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
    CollectionStats:
      properties:
        tracks:
          $ref: '#/components/schemas/CollectionTrackStats'
    CollectionTrackStats:
      properties:
        totalCount:
          $ref: '#/components/schemas/TotalCount'
        totalDurationMs:
          $ref: '#/components/schemas/DurationMs'
      required:
        - totalCount
        - totalDurationMs
    CollectionEntity:
      properties:
        header:
          $ref: '#/components/schemas/EntityHeader'
        body:
          $ref: '#/components/schemas/Collection'
      required:
        - header
        - body
    CollectionEntityWithStats:
      properties:
        header:
          $ref: '#/components/schemas/EntityHeader'
        body:
          $ref: '#/components/schemas/Collection'
        stats:
          $ref: '#/components/schemas/CollectionStats'
      required:
        - header
        - body
    Color:
      required:
        - code
      properties:
        code:
          $ref: '#/components/schemas/ColorCode'
    ColorCode:
      description: |
        A hexadecimal color code `#AARRGGBB` with 8 bits per channel.
      type: string
      minLength: 9
      maxLength: 9
      example: '#FF808080'
    Comment:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/CommentText'
          - $ref: '#/components/schemas/MetadataOwner'
      description: |
        Tuple of 2 elements containing a text and an optional (= nullable) owner.
    CommentText:
      type: string
    ConditionModifier:
      type: string
      enum:
        - not
    DurationMs:
      type: number
      minimum: 0
      example: 210387.576
    EntityUid:
      type: string
      minLength: 32
      maxLength: 32
      example: 0AcZjgLUx5bFAd5EaJ42RTET1n2S_oxn
      description: A globally unique identifier (UID) for entities.
    EntityRevisionOrdinal:
      type: integer
      format: int64
      minimum: 1
      example: 3
    EntityRevision:
      type: array
      minItems: 2
      maxItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityRevisionOrdinal'
          - $ref: '#/components/schemas/TimeStamp'
      description: |
        Tuple of 2 elements containing an ordinal and a timestamp.
    EntityHeader:
      properties:
        uid:
          $ref: '#/components/schemas/EntityUid'
        revision:
          $ref: '#/components/schemas/EntityRevision'
    ExternalReference:
      type: string
      minLength: 1
      example: 'http://musicbrainz.org/track/d878c95a-8a6b-3be6-b6df-7d720a480625'
      description: |
        Stringified external reference, e.g. a URL.
    FilterModifier:
      type: string
      enum:
        - complement
    IndexCount:
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: integer
        minimum: 0
      description: |
        Identifies the number of the current item and the number of total items.
        Both values are optional and might be `null`.
    KeySignature:
      properties:
        code:
          type: integer
          minimum: 0
          maximum: 24
          example: 1
      required:
        - code
      description: |
        The key signature is denoted by a code:
          * 0 = unknown/invalid
          * 1 = C maj
          * 2 = A min
          * 3 = G maj
          * 4 = E min
          * ...
          * 23 = F maj
          * 24 = D min
    LanguageCode:
      type: string
      minLength: 2
      maxLength: 3
      example: eng
      description: |
        A language code according to ISO 639-1/2/3.
    LocateTracksParams:
      properties:
        uri:
          $ref: '#/components/schemas/StringCondition'
    Lyrics:
      properties:
        text:
          type: string
        lang:
          $ref: '#/components/schemas/LanguageCode'
        explicit:
          type: boolean
          description: |
            Indicates wether the text is classified as explicit.
    MediaType:
      type: string
      minLength: 1
      example: audio/mpeg
      description: |
        A media type string according to RFC 6838.
    MetadataOwner:
      type: string
      minLength: 1
    NumericComparator:
      type: string
      enum:
        - less-than
        - greater-than
        - equal-to
      description: |
        Numeric comparison operators.
    NumericCondition:
      required:
        - comparator
        - value
      properties:
        modifier:
          $ref: '#/components/schemas/ConditionModifier'
        comparator:
          $ref: '#/components/schemas/NumericComparator'
        value:
          type: number
    NumericField:
      type: string
      enum:
        - bitrate-bps
        - channels-count
        - duration-ms
        - keysig-code
        - samplerate-hz
        - tempo-bpm
        - timesig-top
        - timesig-bottom
    NumericFilter:
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        field:
          $ref: '#/components/schemas/NumericField'
        condition:
          $ref: '#/components/schemas/NumericCondition'
    PhraseField:
      type: string
      enum:
        - album-artist
        - album-title
        - comments
        - media-type
        - source
        - track-artist
        - track-title
      description: |
        Selectable track fields, including
          * `comments` - all comments, i.e. independent of the owner
          * `source` - percent-decoded URI
          * ...and more...
    PhraseFilter:
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/PhraseField'
        phrase:
          type: string
          example: michael jackson
          description: |
            Tokenized by whitespace, concatenated with wildcards, and filtered
            using case-insensitive "contains" semantics against each of the
            selected fields, e.g. "la bell" or "tt ll" both match "Patti
            LaBelle".
      required:
        - phrase
    Rating:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/ScoreValue'
          - $ref: '#/components/schemas/MetadataOwner'
      description: |
        Tuple of 2 elements containing a score value for the rating and an optional (= nullable) owner.
    Release:
      properties:
        copyright:
          type: string
        licenses:
          type: array
          items:
            type: string
        releasedAt:
          $ref: '#/components/schemas/TimeStamp'
        releasedBy:
          type: string
        xrefs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalReference'
    ReplacementMode:
      type: string
      enum:
        - update-only
        - update-or-create
      description: |
        Operational mode for resolving conflicts during replacement
          * `update-only` - only update existing entities and discard new entities that need to be created
          * `update-or-create` - create a new entity if no existing entity could be found/located
    ReplaceTracksParams:
      properties:
        mode:
          $ref: '#/components/schemas/ReplacementMode'
        replacements:
          type: array
          items:
            $ref: '#/components/schemas/TrackReplacement'
    ReplacedTracks:
      properties:
        created:
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        updated:
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        skipped:
          description: |
            Unchanged tracks that don't need to be updated.
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        rejected:
          description: |
            Informational messages about ambiguous or inconsistent tracks.
          type: array
          items:
            type: string
        discarded:
          description: |
            Informational messages about nonexistent tracks that need to be
            created.
          type: array
          items:
            type: string
    SampleRate:
      required:
        - hz
      properties:
        hz:
          type: integer
          format: int32
          minimum: 1
          example: 44100
      description: |
        The sample rate in Hertz (Hz).
    ScoredSongFeature:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/ScoreValue'
          - $ref: '#/components/schemas/SongFeature'
      description: |
        Tuple of 2 elements containing a score value and a feature selector.
    ScoredTag:
      type: array
      minLength: 3
      maxLength: 3
      items:
        oneOf:
          - $ref: '#/components/schemas/ScoreValue'
          - $ref: '#/components/schemas/TagTerm'
          - $ref: '#/components/schemas/TagFacet'
      description: |
        Tuple of 3 elements containing a score value, a term, and an optional (=
        nullable) facet.
    ScoredTotalCount:
      properties:
        tag:
          $ref: '#/components/schemas/ScoredTag'
        count:
          $ref: '#/components/schemas/TotalCount'
      required:
        - tag
        - count
      description: |
        Tag with an average score across all occurrences and the total number of
        occurrences.
    ScoreValue:
      type: number
      minimum: 0
      maximum: 1
      example: 0.83
      description: |
        Normalized score value between 0 and 1.
    SearchTracksParams:
      properties:
        phraseFilter:
          $ref: '#/components/schemas/PhraseFilter'
        numericFilters:
          type: array
          items:
            $ref: '#/components/schemas/NumericFilter'
        tagFilters:
          type: array
          items:
            $ref: '#/components/schemas/TagFilter'
        ordering:
          type: array
          items:
            $ref: '#/components/schemas/TrackSort'
    SongFeature:
      type: string
      enum:
        - acousticness
        - danceability
        - energy
        - instrumentalness
        - liveness
        - popularity
        - speechiness
        - valence
    SongProfile:
      properties:
        tempo:
          $ref: '#/components/schemas/Tempo'
        timesig:
          $ref: '#/components/schemas/TimeSignature'
        keysig:
          $ref: '#/components/schemas/KeySignature'
        features:
          type: array
          items:
            $ref: '#/components/schemas/ScoredSongFeature'
    SortDirection:
      type: string
      enum:
        - asc
        - desc
      description: |
        Direction for sorting results.
          * `asc` - ascending
          * `desc` - descending
    StringComparator:
      type: string
      enum:
        - starts-with
        - ends-with
        - contains
        - matches
      description: |
        Comparison operators for strings.
    StringCondition:
      properties:
        modifier:
          $ref: '#/components/schemas/ConditionModifier'
        comparator:
          $ref: '#/components/schemas/StringComparator'
        value:
          type: string
      required:
        - comparator
        - value
    StringTotalCount:
      properties:
        value:
          type: string
        count:
          $ref: '#/components/schemas/TotalCount'
      required:
        - value
        - count
    StringField:
      type: string
      enum:
        - album-artist
        - album-title
        - media-type
        - track-artist
        - track-title
    StringFieldCount:
      properties:
        field:
          $ref: '#/components/schemas/StringField'
        counts:
          type: array
          items:
            $ref: '#/components/schemas/StringTotalCount'
      required:
        - field
        - counts
    TagFacet:
      type: string
      minLength: 1
      example: genre
      description: |
        Non-empty, lowercase, string that defines the (optional) facet of tag.
    TagFacetCount:
      properties:
        facet:
          $ref: '#/components/schemas/TagFacet'
        count:
          $ref: '#/components/schemas/TotalCount'
      required:
        - count
      description: |
        Optional tag facet with the total number of occurrences.
    TagFilter:
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        facet:
          $ref: '#/components/schemas/TagFacet'
        term:
          $ref: '#/components/schemas/StringCondition'
        score:
          $ref: '#/components/schemas/NumericCondition'
    TagTerm:
      type: string
      minLength: 1
      example: Hip Hop/Rap
      description: |
        Non-empty string that defines the textual content of the tag.
    Tempo:
      properties:
        bpm:
          type: number
          minimum: 0
          example: 110.67
      required:
        - bpm
      description: |
        The tempo measured in `beats per minute`.
    TimeSignature:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TimeSignatureTop'
          - $ref: '#/components/schemas/TimeSignatureBottom'
      description: |
        Tuple of 2 elements containing the top and bottom values of the time signature.
    TimeSignatureTop:
      type: integer
      format: i32
      minimum: 0
      example: 3
      description: |
        The top number of the time signature that denotes the number of beats in each measure or bar.
    TimeSignatureBottom:
      type: integer
      format: i32
      minimum: 0
      example: 4
      description: |
        The bottom number of the time signature that denotes which type of note is getting the beat.
    TimeStamp:
      type: string
      format: date-time
      example: '2018-06-10T12:19:50.758Z'
    Title:
      properties:
        name:
          type: string
          minLength: 1
          example: Yellow Submarine
        level:
          $ref: '#/components/schemas/TitleLevel'
        lang:
          $ref: '#/components/schemas/LanguageCode'
      required:
        - name
    TitleLevel:
      type: string
      enum:
        - main
        - sub
        - wrk
        - mvn
      description: |
        Optional level that defaults to `main` if missing
          * `main` - default display string
          * `sub` - a subtitle
          * `wrk` - a work title for classical music
          * `mvn` - a movement title for classical music
    TotalCount:
      type: integer
      minimum: 0
      example: 1746
      description: |
        Total number of occurrences.
    Track:
      properties:
        actors:
          type: array
          items:
            $ref: '#/components/schemas/Actor'
        album:
          $ref: '#/components/schemas/Album'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        discNumbers:
          $ref: '#/components/schemas/IndexCount'
        locks:
          type: array
          items:
            $ref: '#/components/schemas/TrackLock'
        lyrics:
          $ref: '#/components/schemas/Lyrics'
        markers:
          type: array
          items:
            $ref: '#/components/schemas/TrackMarker'
        movementNumbers:
          $ref: '#/components/schemas/IndexCount'
        profile:
          $ref: '#/components/schemas/SongProfile'
        ratings:
          type: array
          items:
            $ref: '#/components/schemas/Rating'
        release:
          $ref: '#/components/schemas/Release'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/TrackResource'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ScoredTag'
        titles:
          type: array
          items:
            $ref: '#/components/schemas/Title'
        trackNumbers:
          $ref: '#/components/schemas/IndexCount'
        xrefs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalReference'
    TrackCollection:
      properties:
        uid:
          $ref: '#/components/schemas/EntityUid'
        since:
          $ref: '#/components/schemas/TimeStamp'
      required:
        - uid
        - since
    TrackEntity:
      properties:
        header:
          $ref: '#/components/schemas/EntityHeader'
        body:
          $ref: '#/components/schemas/Track'
      required:
        - header
        - body
    TrackLock:
      type: string
      enum:
        - loudness
        - tempo
        - keysig
        - timesig
    TrackMark:
      type: string
      enum:
        - load-cue
        - hot-cue
        - fade-in
        - fade-out
        - mix-in
        - mix-out
        - sample
        - loop
      description: |
          * `load-cue` - default start point when loading a track, only one per track
          * `hot-cue` - jump point
          * `fade-in` - only one per track
          * `fade-out` - only one per track
          * `mix-in`
          * `mix-out`
          * `sample`
          * `loop`
    TrackMarker:
      properties:
        mark:
          $ref: '#/components/schemas/TrackMark'
        offsetMs:
          $ref: '#/components/schemas/DurationMs'
        lengthMs:
          $ref: '#/components/schemas/DurationMs'
        number:
          type: integer
        label:
          type: string
        color:
          $ref: '#/components/schemas/Color'
      required:
        - mark
        - offset
      description: |
        Marker to identify a point (no length or length = 0) or section (length > 0) within a track for different purposes:
          * Cueing - jump points without a length
          * Fading - short sections for automatic playback transitions, only one in/out per track
          * Mixing - long sections for manual transitions with beat matching
          * Sampling - sections that can played once or repeatedly and are triggered manually
          * Looping - sections that are played repeatedly after entering during playback
    TrackReplacement:
      properties:
        uri:
          $ref: '#/components/schemas/Uri'
        track:
          $ref: '#/components/schemas/Track'
      required:
        - uri
        - track
      description: |
        The URI is used for looking up the existing track (if any) that gets
        replaced.
    TrackResource:
      properties:
        collection:
          $ref: '#/components/schemas/TrackCollection'
        source:
          $ref: '#/components/schemas/TrackSource'
        color:
          $ref: '#/components/schemas/Color'
        playCounter:
          type: integer
          minimum: 0
    TrackSortField:
      type: string
      enum:
        - album-artist
        - album-title
        - in-collection-since
        - last-revisioned-at
        - released-at
        - released-by
        - track-artist
        - track-title
    TrackSort:
      properties:
        field:
          $ref: '#/components/schemas/TrackSortField'
        direction:
          $ref: '#/components/schemas/SortDirection'
    TrackSource:
      properties:
        uri:
          $ref: '#/components/schemas/Uri'
        synchronization:
          $ref: '#/components/schemas/TrackSynchronization'
        mediaType:
          $ref: '#/components/schemas/MediaType'
        audioContent:
          $ref: '#/components/schemas/AudioContent'
    TrackSynchronization:
      properties:
        revision:
          $ref: '#/components/schemas/EntityRevision'
        when:
          $ref: '#/components/schemas/TimeStamp'
      required:
        - revision
        - when
    Uri:
      type: string
      minLength: 1
      example: >-
        file:///home/user/Music/album%20artist/album%20title/01%20the%20first%20track.mp3
      description: |
        A percent-encoded URI.
