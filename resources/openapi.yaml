openapi: 3.0.3
info:
  version: 0.7.3
  title: aoide
  description: Music library management
  license:
    name: AGPL-3.0-or-later
    url: 'https://www.gnu.org/licenses/agpl-3.0.html'
servers:
  - url: 'http://[::1]:8080/'
    description: Local development server
paths:
  /collections:
    get:
      summary: List collections
      description: |
        List all collections that have recently been created/modified.
      operationId: listCollections
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      responses:
        '200':
          description: |
            An array of collection entities.

            Results are sorted in descending order of the revision
            time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new collection
      operationId: createCollection
      tags:
        - Collections
      requestBody:
        description: |
          Properties of the new collection.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionEntityBody'
      responses:
        '201':
          description: |
            The header of the newly created collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/collections/{collectionUid}':
    get:
      summary: Load a collection
      description: |
        Load a collection entity referenced by its UID.
      operationId: loadCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/collectionWithQuery'
      responses:
        '200':
          description: |
            The loaded collection entity, optionally with additional statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntityWithStats'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a collection
      description: |
        Update a collection entity after validating that the provided `header`
        matches that of the current entity (optimistic locking).
      operationId: updateCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        description: |
          A collection entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionEntity'
      responses:
        '200':
          description: |
            The header of the updated collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a collection
      operationId: deleteCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /playlists:
    get:
      summary: List playlists
      description: |
        List all playlists that have recently been created/modified.
      operationId: listPlaylists
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/playlistBriefQuery'
        - $ref: '#/components/parameters/playlistTypeQuery'
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      responses:
        '200':
          description: |
            An array of playlist entities, either with all entries
            or only a brief summary without any entries.

            Results are sorted in descending order of the revision
            time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/PlaylistEntity'
                    - $ref: '#/components/schemas/PlaylistBriefEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new playlist
      operationId: createPlaylist
      tags:
        - Playlists
      requestBody:
        description: |
          Properties and entries of the new playlist.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistEntityBody'
      responses:
        '201':
          description: |
            A brief summary of the newly created playlist entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistBriefEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/playlists/{playlistUid}':
    get:
      summary: Load a playlist
      description: |
        Load a playlist entity with all entries referenced by its UID.
      operationId: loadPlaylist
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/playlistUidPath'
      responses:
        '200':
          description: |
            The loaded playlist entity including all entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistEntity'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a playlist
      description: |
        Update a playlist entity after validating that the provided `header`
        matches that of the current entity (optimistic locking).
      operationId: updatePlaylist
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/playlistUidPath'
      requestBody:
        description: |
          A playlist entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistEntity'
      responses:
        '200':
          description: |
            A brief summary of the updated playlist entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistBriefEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    patch:
      summary: Patch a playlist
      description: |
        Modify a playlist by applying a sequence of operations.
      operationId: patchPlaylist
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/playlistUidPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistPatchParams'
      responses:
        '200':
          description: |
            A brief summary of the patched playlist entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistBriefEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a playlist
      operationId: deletePlaylist
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/playlistUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks:
    get:
      summary: List tracks
      description: |
        List all tracks that have either recently been created/modified if no
        collection is specified or that have recently been added to the given
        collection.
      operationId: listTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidQuery'
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      responses:
        '200':
          description: |
            An array of track entities.

            Results are sorted in descending order of the revision
            time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new track
      operationId: createTrack
      tags:
        - Tracks
      responses:
        '201':
          description: |
            The header of the newly created track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tracks/{trackUid}':
    get:
      summary: Load a track
      description: |
        Load a track entity referenced by its UID.
      operationId: loadTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '200':
          description: |
            The loaded track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackEntity'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a track
      description: |
        Update a track entity after validating that the provided `header`
        matches that of the current entity (optimistic locking).
      operationId: updateTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      requestBody:
        description: |
          A track entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackEntity'
      responses:
        '200':
          description: |
            The header of the updated track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a track
      operationId: deleteTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/load:
    post:
      summary: Load multiple tracks by UID
      description: |
        Load multiple tracks by their UID.

        The result may contain fewer tracks than requested if some
        tracks do not exist. The order of the given UIDs is not preserved
        in the result set, i.e. the ordering of tracks is undefined!!
      operationId: loadTracks
      tags:
        - Tracks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EntityUid'
      responses:
        '200':
          description: |
            An array of found tracks in arbitrary order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/locate:
    post:
      summary: Load multiple tracks matching a media source filter
      description: |
        Locate and load tracks according to their (percent-encoded) media URI.
        Optionally the URI lookup can be restricted to a single collection.
      operationId: locateTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidQuery'
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaSourceFilterParams'
      responses:
        '200':
          description: |
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/resolve:
    post:
      summary: Resolve the UIDs of tracks from a list of URIs
      description: |
        Resolve the UID of tracks from a list of URIs.
        The result list is unordered and contains only those tracks
        that have been found.
      operationId: resolveTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidRequiredQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Uri'
      responses:
        '200':
          description: |
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/replace:
    post:
      summary: Replace tracks by URI
      description: |
        Replace tracks with a new revision by locating them through their
        (percent-encoded) media URI. Optionally the URI lookup can be
        restricted to a single collection.
      operationId: replaceTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceTracksParams'
      responses:
        '200':
          description: |
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplacedTracks'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/purge:
    post:
      summary: Purge track sources and tracks by URI
      description: |
        Purge all track sources that equal one of the given URIs.
        If the purged source was the last source of a track the
        entire track is deleted.
      operationId: purgeTrackSources
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurgeTracksParams'
      responses:
        '204':
          description: |
            Track sources and tracks have been purged.
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/relocate:
    post:
      summary: Relocate track sources and tracks by their URI prefixes
      description: |
        Relocate all track sources that equal one of the given URI prefixes.
        Old URI prefixes are replaced by the given new URI prefixes.
      operationId: relocateTrackSources
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelocateTracksParams'
      responses:
        '204':
          description: |
            Track sources have been relocated.
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/search:
    post:
      summary: Search tracks
      description: |
        Search tracks by evaluating various filter conditions and sort the
        results.
      operationId: searchTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidQuery'
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchParams'
      responses:
        '200':
          description: |
            An array of matching tracks in the requested order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /albums/count-tracks:
    post:
      summary: Count tracks per album
      description: |
        List albums (title, (main) artist, release year) together with their corresponding number of tracks.
      operationId: countTracksByAlbum
      tags:
        - Albums
      parameters:
        - $ref: '#/components/parameters/collectionUidQuery'
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTracksByAlbumParams'
      responses:
        '200':
          description: |
            Album track statistics.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumTrackCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tags/count-tracks:
    post:
      summary: Count tracks per tag
      description: |
        Count the number of occurrences and avg. score of tags
        discriminated by their facet and label. Optionally the
        evaluation can be restricted to a single collection.
      operationId: countTracksByTag
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/collectionUidQuery'
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTracksByTagParams'
      responses:
        '200':
          description: |
            Tag frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagAvgScoreCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tags/facets/count-tracks:
    post:
      summary: Count tracks per tag facet
      description: |
        Count the number of occurrences of tag facets. Optionally
        the evaluation can be restricted to a single collection.
      operationId: countTracksByTagFacet
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/collectionUidQuery'
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTracksByTagFacetParams'
      responses:
        '200':
          description: |
            Tag facet frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagFacetCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /shutdown:
    post:
      summary: Shut down gracefully
      operationId: shutdown
      tags:
        - Shutdown
      responses:
        '202':
          description: |
            Shutdown has been initiated.
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          description: |
            Failed to forward the request.
components:
  responses:
    201Created:
      description: |
        The resource has been created.
    204NoContent:
      description: |
        The request has been processed, no response available.
    400BadRequest:
      description: |
        The request with the provided parameters was invalid.
    404NotFound:
      description: |
        The specified resource was not found.
    500InternalServerError:
      description: |
        The server failed to process the request.
  parameters:
    paginationOffsetQuery:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: |
        Number of items to skip before returning the results or 0 if missing.
    paginationLimitQuery:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: |
        Maximum number of items to return or unlimited if missing.

        When this parameter is specified its value is evaluated and
        applied, i.e. a value of 0 will result in an empty set of
        returned items.
    collectionUidQuery:
      name: collectionUid
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/CollectionUid'
      description: |
        An optional UID for selecting a single collection or none for all
        collections.
    collectionUidRequiredQuery:
      name: collectionUid
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/CollectionUid'
      description: |
        A UID for selecting a single collection.
    collectionUidPath:
      name: collectionUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/CollectionUid'
      description: |
        The UID of the collection.
    collectionWithQuery:
      name: with
      in: query
      required: false
      schema:
        type: string
      description: |
        Comma-separated list of boolean options:
          * `track-stats` - Include track statistics
    playlistBriefQuery:
      name: brief
      in: query
      required: false
      description: |
        Allows to request only a brief playlist representation
        without individual entries
      schema:
        type: boolean
    playlistTypeQuery:
      name: type
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/PlaylistType'
      description: |
        The desired custom type of the playlist.
    playlistUidPath:
      name: playlistUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/PlaylistUid'
      description: |
        The UID of the playlist.
    trackUidPath:
      name: trackUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/TrackUid'
      description: |
        The UID of the track.
  schemas:
    Actor:
      oneOf:
        - $ref: '#/components/schemas/ActorName'
        - type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ActorName'
              - $ref: '#/components/schemas/ActorRole'
              - $ref: '#/components/schemas/ActorPrecedence'
      description: |
        Mandatory name, followed by optional role and optional precedence.

        Some actor naming examples for the role _artist_:
          * summary = 'Michael Jackson'
          * summary = 'Bill Medley & Jennifer Warnes', primary = 'Bill Medley', primary = 'Jennifer Warnes'
          * summary = 'Nick Jonas ft. Anne-Marie & Mike Posner', primary = 'Nick Jonas', secondary = 'Anne-Marie', secondary = 'Mike Posner'

        Only a single `summary` name is allowed while both `primary` and `secondary`
        names may appear multiple times.
    ActorName:
      type: string
      minLength: 1
      example: The Beatles
    ActorPrecedence:
      type: integer
      enum: [0, 1, 2]
      description: |
        Optional actor precedence that defaults to 0 = summary if missing:
          * 0 = summary actor
          * 1 = primary actor(s)
          * 2 = secondary actor(s)
    ActorRole:
      type: integer
      enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
      description: |
        Optional actor role that defaults to 0 = artist if missing:
          * 0 = artist
          * 1 = arranger
          * 2 = composer
          * 3 = conductor
          * 4 = djmixer
          * 5 = engineer
          * 6 = lyricist
          * 7 = mixer
          * 8 = performer
          * 9 = producer
          * 10 = publisher
          * 11 = remixer
          * 12 = writer
    Album:
      properties:
        act:
          type: array
          description: |
            An array of acting participants/people
          items:
            $ref: '#/components/schemas/Actor'
        cpl:
          type: boolean
          description: |
            Indicates whether this album is a compilation with various artists.
        tit:
          type: array
          description: |
            An array of titles
          items:
            $ref: '#/components/schemas/Title'
    AlbumTrackCount:
      properties:
        art:
          $ref: '#/components/schemas/ArtistName'
        rel:
          $ref: '#/components/schemas/ReleaseDate'
        tit:
          $ref: '#/components/schemas/TitleName'
        cnt:
          $ref: '#/components/schemas/TotalTrackCount'
      required:
        - tit
        - cnt
    ArtistName:
      allOf:
        - $ref: '#/components/schemas/ActorName'
      example: The Beatles
    ImageDigest:
      description: |
        Fingerprint that identifies the contents of an image for cache lookup
        and to decide about modifications, e.g. a base64-encoded SHA256
        hash of the image data.
      type: string
      minLength: 1
    ImageSize:
      description: |
        Width and height of an image in pixels
      type: array
      minLength: 2
      maxLength: 2
      items:
        type: integer
        minimum: 1
        maximum: 65535
        example: 600
    Artwork:
      description: |
        An image that is embedded in the media content or referenced as
        an external resource by the optional URI. The URI may also select
        one out of multiple embedded resources.

        The optional background color can be used to quickly display
        a preliminary view before the actual image has been loaded and
        for selecting a matching color scheme.
      properties:
        col:
          $ref: '#/components/schemas/ArtworkColor'
        dig:
          $ref: '#/components/schemas/ImageDigest'
        dim:
          $ref: '#/components/schemas/ImageSize'
        typ:
          $ref: '#/components/schemas/MediaType'
      additionalProperties:
        $ref: '#/components/schemas/ArtworkResourceProperties'
    ArtworkColor:
      description: |
        A solid (background) color, e.g. the average color of the artwork image
      allOf:
        - $ref: '#/components/schemas/RgbColor'
    ArtworkResourceProperties:
      oneOf:
        - $ref: '#/components/schemas/ArtworkResourcePropertyEmbedded'
        - $ref: '#/components/schemas/ArtworkResourcePropertyUri'
    ArtworkResourcePropertyEmbedded:
      description: |
        Embedded artwork resource referenced by a string selector
      properties:
        res:
          type: string
          minLength: 1
    ArtworkResourcePropertyUri:
      description: |
        External artwork resource referenced by an URI
      properties:
        uri:
          allOf:
            - $ref: '#/components/schemas/Uri'
    AudioContent:
      properties:
        bps:
          $ref: '#/components/schemas/BitRateBps'
        chn:
          $ref: '#/components/schemas/Channels'
        len:
          $ref: '#/components/schemas/DurationMs'
        enc:
          $ref: '#/components/schemas/Encoder'
        lou:
          $ref: '#/components/schemas/LoudnessLufs'
        shz:
          $ref: '#/components/schemas/SampleRateHz'
    AvgTagScore:
      allOf:
        - $ref: '#/components/schemas/TagScore'
    MeasureNumber:
      description: |
        The measure 1..n counted from the start of the track.
      type: integer
      format: int32
      minimum: 1
      maximum: 65535
      example: 24
    BeatAndKeyMarker:
      properties:
        bpm:
          $ref: '#/components/schemas/TempoBpm'
        btn:
          $ref: '#/components/schemas/BeatNumber'
        key:
          $ref: '#/components/schemas/KeySignature'
        msn:
          $ref: '#/components/schemas/MeasureNumber'
        pos:
          $ref: '#/components/schemas/MarkerPosition'
        tim:
          $ref: '#/components/schemas/TimeSignature'
      required:
        - pos
      description: |
        Marks the beginning of a section with uniform tempo, timining,
        and musical key.

        The position is supposed to be collocated with a single beat.

        If any of the properties are missing their values are extrapolated
        from the preceding markers until a new value is defined explicitly.
        Both measure and beat number can be calculated from a single, initial
        value if both tempo and beats per measure (as of the time signature)
        are known.
    BeatAndKeyMarkers:
      properties:
        mkl:
          description: |
            List of *beat & key* markers.

            The markers are sorted by their positions in ascending order.
          type: array
          items:
            $ref: '#/components/schemas/BeatAndKeyMarker'
        mks:
          $ref: '#/components/schemas/MarkerState'
    BeatNumber:
      type: integer
      minimum: 1
      maximum: 65535
      example: 1
      description: |
        A number for counting beats in a measure.
    BeatUnit:
      type: integer
      minimum: 1
      maximum: 65535
      example: 4
      description: |
        The note value that counts as one beat.

        This number appears as the denominator/lower value in the
        stacked notation for time signature.

        Example: 4 for a quarter note
    BitRateBps:
      type: integer
      format: int32
      minimum: 0
      example: 256000
      description: |
        The bit rate in bits per second (bps).
    ChannelCount:
      type: integer
      minimum: 1
      maximum: 65535
      example: 2
    ChannelLayout:
      type: string
      enum:
        - mono
        - dual-mono
        - stereo
      description: |
        The layout of the channels.

        Each predefined layout implies a number of channels that then
        doesn't need to be specified explicitly.

        Predefined layouts:
          * mono (1 channel)
          * dual-mono (2 channels)
          * stereo (2 channels)
    Channels:
      description: |
        Either a channel count or a channel layout.
      oneOf:
        - $ref: '#/components/schemas/ChannelCount'
        - $ref: '#/components/schemas/ChannelLayout'
    CollectionEntity:
      description: |
        Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/CollectionEntityBody'
    CollectionEntityBody:
      properties:
        dsc:
          description: Description
          type: string
        nam:
          description: Name
          type: string
          minLength: 1
      required:
        - nam
    CollectionEntityWithStats:
      properties:
        entity:
          $ref: '#/components/schemas/CollectionEntity'
        stats:
          $ref: '#/components/schemas/CollectionStats'
    CollectionStats:
      properties:
        tracks:
          $ref: '#/components/schemas/CollectionTrackStats'
    CollectionTrackStats:
      properties:
        totalCount:
          $ref: '#/components/schemas/TotalTrackCount'
      required:
        - totalCount
    CollectionUid:
      allOf:
        - $ref: '#/components/schemas/EntityUid'
    Color:
      oneOf:
        - $ref: '#/components/schemas/RgbColorVariant'
        - $ref: '#/components/schemas/ColorIndexVariant'
      description: |
        Either an RGB color value or a color index.
    ColorIndex:
      type: integer
      minimum: 0
      maximum: 65535
      example: 5
      description: |
        A color palette index.
    ColorIndexVariant:
      properties:
        idx:
          $ref: '#/components/schemas/ColorIndex'
    CountTracksByAlbumParams:
      properties:
        minReleaseDate:
          $ref: '#/components/schemas/ReleaseDate'
        maxReleaseDate:
          $ref: '#/components/schemas/ReleaseDate'
        ordering:
          type: array
          items:
            $ref: '#/components/schemas/TrackSortOrder'
      description: |
        Albums can be filtered by release year (inclusive).

        Results can be ordered by album title, album artist, and release year.
    CountTracksByTagFacetParams:
      properties:
        facets:
          $ref: '#/components/schemas/TagFacetFilter'
        ordering:
          type: array
          description: |
            Results can be sorted by facet or count. All other fields are ignored.
          items:
            $ref: '#/components/schemas/TagSortOrder'
    CountTracksByTagParams:
      properties:
        facets:
          $ref: '#/components/schemas/TagFacetFilter'
        includeNonFacetedTags:
          type: boolean
          default: false
          description: |
            Applies the query to all non-faceted tags with no facet
            and just a label. Each distinct label will be scored and
            counted.
        ordering:
          type: array
          description: |
            Results can be sorted by all available fields.
          items:
            $ref: '#/components/schemas/TagSortOrder'
    DiscIndex:
      allOf:
        - $ref: '#/components/schemas/Index'
    DurationMs:
      type: number
      format: double
      minimum: 0
      example: 210387.576
    Encoder:
      properties:
        nam:
          description: Name
          type: string
          minLength: 1
        cfg:
          description: Encoder settings or configuration
          type: string
    EntityHeader:
      type: array
      minItems: 2
      maxItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityUid'
          - $ref: '#/components/schemas/EntityRevision'
    EntityRevision:
      type: array
      minItems: 2
      maxItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityVersionNumber'
          - $ref: '#/components/schemas/EntityRevisionInstant'
      description: |
        Tuple of 2 elements containing a version number and a time stamp.
    EntityRevisionInstant:
      allOf:
        - $ref: '#/components/schemas/TimeStampTicks'
    EntityVersionNumber:
      type: integer
      format: int64
      minimum: 1
      example: 3
    EntityUid:
      type: string
      minLength: 32
      maxLength: 33
      example: 4L9v84JeigpHxEdtVHUkL6JASD92sDwdW
      description: A unique identifier (UID) for entities in base-58 encoding.
    FilterModifier:
      type: string
      enum:
        - complement
    Index:
      oneOf:
        - type: integer
          format: int32
          minimum: 0
          description: |
            Identifies the number of the current item.
        - type: array
          minItems: 2
          maxItems: 2
          items:
            type: integer
            format: int32
            minimum: 0
          description: |
            Identifies the number of the current item (1st) and the number of total items (2nd).
    Indexes:
      properties:
        dsi:
          $ref: '#/components/schemas/DiscIndex'
        mvi:
          $ref: '#/components/schemas/MovementIndex'
        tri:
          $ref: '#/components/schemas/TrackIndex'
    KeySignature:
      type: integer
      enum:
        [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
        ]
      description: |
        The key signature is denoted by a code with one of the following values:
          * 1 = C maj
          * 2 = A min
          * 3 = G maj
          * 4 = E min
          * ...
          * 23 = F maj
          * 24 = D min
        The numbering follows the Circle of fifth / Open Key notation in
        clock-wise orientation, alternating between major and minor keys.
    MediaSourceFilterParams:
      properties:
        mediaUri:
          $ref: '#/components/schemas/StringPredicate'
    LoudnessLufs:
      type: number
      format: double
      example: -13.4239
      description: |
        Loudness measured in "Loudness Units relative to Full Scale" (LUFS)
        with 1 LU = 1 dB according to ITU-R BS.1770.

        EBU R128 proposes a target level of -23 LUFS while the ReplayGain v2
        specification (RG2) proposes -18 LUFS for achieving similar perceptive
        results compared to ReplayGain v1 (RG1).
    MarkerPosition:
      oneOf:
        - $ref: '#/components/schemas/MarkerPositionMillis'
        - $ref: '#/components/schemas/MarkerPositionMillisSamples'
      description: |
        The position of a track marker.

        Either the position in milliseconds or the position in both
        milliseconds and samples.
    MarkerPositionEnd:
      description: |
        The end/out position of a marker.
      allOf:
        - $ref: '#/components/schemas/MarkerPosition'
    MarkerPositionStart:
      description: |
        The start/in position of a marker.
      allOf:
        - $ref: '#/components/schemas/MarkerPosition'
    MarkerPositionMillis:
      allOf:
        - $ref: '#/components/schemas/PositionMs'
    MarkerPositionMillisSamples:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/PositionMs'
          - $ref: '#/components/schemas/SamplePosition'
      description: |
        An array with exactly 2 elements: The position in milliseconds
        followed by the position in samples.
    MarkerFilter:
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        label:
          $ref: '#/components/schemas/StringPredicate'
    MarkerLabel:
      type: string
      example: my marker
    MarkerNumber:
      type: integer
      format: int32
      example: 1
    Markers:
      properties:
        cue:
          $ref: '#/components/schemas/CueMarkers'
        bnk:
          $ref: '#/components/schemas/BeatAndKeyMarkers'
    MarkerState:
      description: |
        The (optional) state of markers
        * 0 - read/write (default)
        * 1 - read-only (locked)
      type: integer
      enum: [0, 1]
    MediaContentProperties:
      allOf:
        - $ref: '#/components/schemas/MediaContentAudioProperty'
    MediaContentAudioProperty:
      properties:
        aud:
          $ref: '#/components/schemas/AudioContent'
    MediaSource:
      properties:
        art:
          $ref: '#/components/schemas/Artwork'
        typ:
          $ref: '#/components/schemas/MediaType'
        uri:
          $ref: '#/components/schemas/Uri'
      additionalProperties:
        $ref: '#/components/schemas/MediaContentProperties'
      required:
        - typ
        - uri
    MediaType:
      type: string
      minLength: 1
      example:
      description: |
        A MIME media type string according to RFC 6838.

        If the fundamental type is considered insufficient to specify the
        file's contents and format optionally add a `codecs` parameter
        according to
        https://developer.mozilla.org/docs/Web/Media/Formats/codecs_parameter.

        Examples:
          * audio/flac
          * audio/mp4
          * audio/mp4; codecs=aac
          * audio/mp4; codecs=alac
          * audio/mpeg
          * audio/mpeg; codecs=mp3
          * audio/ogg; codecs=vorbis
          * audio/ogg; codecs=opus
          * audio/opus
    MovementIndex:
      allOf:
        - $ref: '#/components/schemas/Index'
    NumericField:
      type: string
      enum:
        - audioBitRate
        - audioChannelCount
        - audioDuration
        - audioLoudness
        - audioSampleRate
        - trackNumber
        - trackTotal
        - discNumber
        - discTotal
        - releaseYear
        - musicTempo
        - musicKey
    NumericFieldFilter:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/NumericField'
          - $ref: '#/components/schemas/NumericPredicate'
    NumericPredicate:
      oneOf:
        - $ref: '#/components/schemas/NumericPredicateLessThan'
        - $ref: '#/components/schemas/NumericPredicateLessOrEqual'
        - $ref: '#/components/schemas/NumericPredicateGreaterThan'
        - $ref: '#/components/schemas/NumericPredicateGreaterOrEqual'
        - $ref: '#/components/schemas/NumericPredicateEqual'
        - $ref: '#/components/schemas/NumericPredicateNotEqual'
    NumericPredicateLessThan:
      properties:
        lt:
          type: number
          format: double
      required:
        - lt
    NumericPredicateLessOrEqual:
      properties:
        le:
          type: number
          format: double
      required:
        - le
    NumericPredicateGreaterThan:
      properties:
        gt:
          type: number
          format: double
      required:
        - gt
    NumericPredicateGreaterOrEqual:
      properties:
        ge:
          type: number
          format: double
      required:
        - ge
    NumericPredicateEqual:
      properties:
        eq:
          type: number
          format: double
    NumericPredicateNotEqual:
      properties:
        ne:
          type: number
          format: double
    PhraseFieldFilter:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/StringField'
            description: |
              The fields that are matched against the terms. If no fields
              are specified all available string fields are matched.
          - type: array
            items:
              type: string
            description: |
              The terms are concatenated with wildcards, and filtered
              using case-insensitive "contains" semantics for each of the
              selected fields, e.g. "Pa la bell" or "tt ll" both match "Patti
              LaBelle".

              An empty array matches both empty and missing/null fields.
      required:
        - terms
      description: |
        Matches a sequence of terms on any of the given string fields.
        A match for at least one of the fields is sufficient.
    PlainTag:
      description: |
        Either a single label, a single score, or a 2-element array [label, score].
      oneOf:
        - $ref: '#/components/schemas/TagLabel'
        - $ref: '#/components/schemas/TagScore'
        - type: array
          minLength: 2
          maxLength: 2
          items:
            oneOf:
              - $ref: '#/components/schemas/TagLabel'
              - $ref: '#/components/schemas/TagScore'
    PlainTags:
      type: array
      items:
        $ref: '#/components/schemas/PlainTag'
    PlaylistEntityBody:
      properties:
        col:
          $ref: '#/components/schemas/Color'
        dsc:
          $ref: '#/components/schemas/PlaylistDescription'
        lst:
          $ref: '#/components/schemas/PlaylistEntries'
        nam:
          $ref: '#/components/schemas/PlaylistName'
        typ:
          $ref: '#/components/schemas/PlaylistType'
      required:
        - lst
        - nam
    PlaylistBrief:
      properties:
        col:
          $ref: '#/components/schemas/Color'
        dsc:
          $ref: '#/components/schemas/PlaylistDescription'
        lst:
          $ref: '#/components/schemas/PlaylistBriefEntries'
        nam:
          $ref: '#/components/schemas/PlaylistName'
        typ:
          $ref: '#/components/schemas/PlaylistType'
      required:
        - lst
        - nam
    PlaylistBriefEntity:
      description: Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/PlaylistBrief'
    PlaylistDescription:
      description: Optional playlist description
      type: string
    PlaylistEntity:
      description: Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/PlaylistEntityBody'
    PlaylistEntries:
      description: |
        A sequence of playlist entries
      type: array
      items:
        $ref: '#/components/schemas/PlaylistEntry'
    PlaylistBriefEntries:
      properties:
        add:
          description: |
            Minimum (lower bound) and maximum (upper bound) `add`
            time stamp of all playlist entries
          type: array
          minLength: 2
          maxLength: 2
          items:
            $ref: '#/components/schemas/PlaylistEntryAdded'
        cnt:
          description: Number of entries in the playlist
          allOf:
            - $ref: '#/components/schemas/PlaylistEntryCount'
        trk:
          $ref: '#/components/schemas/PlaylistBriefTracks'
      required:
        - cnt
        - trk
    PlaylistBriefTracks:
      properties:
        cnt:
          $ref: '#/components/schemas/PlaylistTrackCount'
      required:
        - cnt
    PlaylistEntry:
      properties:
        add:
          $ref: '#/components/schemas/PlaylistEntryAdded'
        itm:
          $ref: '#/components/schemas/PlaylistItem'
      required:
        - add
        - itm
    PlaylistEntryComment:
      description: |
        Custom comments and notes to annotate a playlist entry
      type: string
    PlaylistEntryCount:
      type: integer
      format: int64
      minimum: 0
    PlaylistTrackCount:
      description: |
        Number of tracks in the playlist
      allOf:
        - $ref: '#/components/schemas/PlaylistEntryCount'
    PlaylistEntryAdded:
      description: |
        Time stamp since when an entry is part of the playlist,
        i.e. when it has been created and added.
      allOf:
        - $ref: '#/components/schemas/TimeStampTicks'
    PlaylistEntryPosition:
      description: |
        0-based position number to locate a playlist entry
      type: integer
      format: int64
      minimum: 0
    PlaylistItem:
      oneOf:
        - $ref: '#/components/schemas/PlaylistItemSeparator'
        - $ref: '#/components/schemas/PlaylistItemTrack'
    PlaylistItemSeparator:
      type: string
      enum:
        - sep
    PlaylistItemTrack:
      properties:
        trk:
          $ref: '#/components/schemas/PlaylistTrack'
      required:
        - trk
    PlaylistName:
      description: Mandatory playlist name
      type: string
      minLength: 1
    PlaylistPatchOperation:
      oneOf:
        - type: object
          properties:
            appendEntries:
              type: object
              properties:
                entries:
                  type: array
                  items:
                    $ref: '#/components/schemas/PlaylistEntry'
              required:
                - entries
          required:
            - appendEntries
        - type: object
          properties:
            insertEntries:
              type: object
              properties:
                before:
                  $ref: '#/components/schemas/PlaylistEntryPosition'
                entries:
                  type: array
                  items:
                    $ref: '#/components/schemas/PlaylistEntry'
              required:
                - before
                - entries
          required:
            - insertEntries
        - type: object
          properties:
            replaceEntries:
              type: object
              properties:
                start:
                  $ref: '#/components/schemas/PlaylistEntryPosition'
                end:
                  $ref: '#/components/schemas/PlaylistEntryPosition'
                entries:
                  type: array
                  items:
                    $ref: '#/components/schemas/PlaylistEntry'
              required:
                - entries
          required:
            - replaceEntries
        - type: object
          properties:
            removeEntries:
              type: object
              properties:
                start:
                  $ref: '#/components/schemas/PlaylistEntryPosition'
                end:
                  $ref: '#/components/schemas/PlaylistEntryPosition'
          required:
            - removeEntries
        - type: string
          enum:
            - removeAllEntries
            - reverseEntries
            - shuffleEntries
            - sortEntriesChronologically
    PlaylistPatchParams:
      properties:
        rev:
          $ref: '#/components/schemas/EntityRevision'
        ops:
          type: array
          items:
            $ref: '#/components/schemas/PlaylistPatchOperation'
      required:
        - ops
    PlaylistTrack:
      description: |
        The UID of the referenced track
      allOf:
        - $ref: '#/components/schemas/TrackUid'
    PlaylistType:
      description: |
        Custom type of to the playlist. This allows 3rd party applications
        to distinguish different kinds of playlists for different purposes
        and depending on their use case, e.g. generated session or history
        playlists for logging all tracks that have been played during this
        session.
      type: string
    PlaylistUid:
      allOf:
        - $ref: '#/components/schemas/EntityUid'
    CueMarker:
      properties:
        col:
          $ref: '#/components/schemas/Color'
        end:
          $ref: '#/components/schemas/MarkerPositionEnd'
        lbl:
          $ref: '#/components/schemas/MarkerLabel'
        num:
          $ref: '#/components/schemas/MarkerNumber'
        pos:
          oneOf:
            - $ref: '#/components/schemas/MarkerPosition'
            - $ref: '#/components/schemas/MarkerPositionStart'
        typ:
          $ref: '#/components/schemas/CueMarkerType'
      required:
        - typ
      description: |
        Marker to identify points (either start or end) or sections (both start
        and end) within a track
    CueMarkers:
      properties:
        mkl:
          description: |
            Cue marker list
          type: array
          items:
            $ref: '#/components/schemas/CueMarker'
        mks:
          $ref: '#/components/schemas/MarkerState'
    CueMarkerType:
      description: |
        Multiple cue markers of the same type per track are only allowed for non-singular types:
        * 0 (`custom`) - custom sections (forward only) or points without predefined semantics
        * 1 (`load`) - singular initial position when loading a track (and return point after stopping)
        * 2 (`main`) - singular main audio section (forward only) of the track, i.e. without leading/trailing silence
        * 3 (`intro`) - singular intro section (forward only) or point of a track for fade-in or mixing
        * 4 (`outro`) - singular outro section (forward only) or point of a track for fade-out or mixing
        * 5 (`hotcue`) - custom start/cue points in a track for direct access while continuing playback, i.e. classical hot cues
        * 6 (`loop`) - sections that are played as loops (forward or backward)
        * 7 (`sample`) - sections that are played as samples (forward or backward)
      type: integer
      enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    PositionMs:
      type: number
      format: double
      example: 210387.576
      description: |
        The position in an audio stream in milliseconds
    PurgeTracksParams:
      type: array
      items:
        $ref: '#/components/schemas/UriPredicate'
    Release:
      properties:
        cpy:
          description: Copyright
          type: string
        dat:
          $ref: '#/components/schemas/ReleasedAt'
        lic:
          description: Licenses
          type: array
          items:
            type: string
        own:
          description: Released by, e.g. a record label or owner
          type: string
    ReleasedAt:
      oneOf:
        - $ref: '#/components/schemas/ReleaseDate'
        - $ref: '#/components/schemas/ReleaseDateTime'
    ReleaseDate:
      oneOf:
        - $ref: '#/components/schemas/YYYY'
        - $ref: '#/components/schemas/YYYYMMDD'
    ReleaseDateTime:
      allOf:
        - $ref: '#/components/schemas/TimeStamp'
    RelocateTracksParams:
      type: array
      items:
        $ref: '#/components/schemas/UriRelocation'
    ReplacedTracks:
      properties:
        created:
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        updated:
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        skipped:
          description: |
            Unchanged tracks that don't need to be updated.
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        rejected:
          description: |
            Informational messages about ambiguous or inconsistent tracks.
          type: array
          items:
            type: string
        discarded:
          description: |
            Informational messages about nonexistent tracks that need to be
            created.
          type: array
          items:
            type: string
    ReplacementMode:
      type: string
      enum:
        - update-only
        - update-or-create
      example: update-or-create
      description: |
        Operational mode for resolving conflicts during replacement
          * `update-only` - only update existing entities and discard new entities that need to be created
          * `update-or-create` - create a new entity if no existing entity could be found/located
    ReplaceTracksParams:
      properties:
        mode:
          $ref: '#/components/schemas/ReplacementMode'
        replacements:
          type: array
          items:
            $ref: '#/components/schemas/TrackReplacement'
    RgbColor:
      type: string
      minLength: 7
      maxLength: 7
      example: '#808080'
      description: |
        A hexadecimal RGB color code `#RRGGBB` with 8 bits per channel.
    RgbColorVariant:
      properties:
        rgb:
          $ref: '#/components/schemas/RgbColor'
    SamplePosition:
      type: number
      format: double
      example: 440287.91876
      description: |
        The position in an audio stream in samples.

        The samples are counted separately for each channel, i.e. the
        sample position equals the number of sample frames for a signal
        with an interleaved channel layout!
    SampleRateHz:
      type: integer
      format: int32
      minimum: 0
      example: 44100
      description: |
        The sample rate in Hertz (Hz).
    SearchParams:
      properties:
        filter:
          $ref: '#/components/schemas/TrackSearchFilterNode'
        ordering:
          type: array
          items:
            $ref: '#/components/schemas/TrackSortOrder'
    SortDirection:
      type: string
      enum:
        - asc
        - dsc
      description: |
        Direction for sorting results.
          * `asc` - ascending
          * `dsc` - descending
    StringField:
      type: string
      enum:
        - mediaUri
        - mediaUriDecoded
        - mediaType
        - trackTitle
        - trackArtist
        - trackComposer
        - albumTitle
        - albumArtist
      description: |
        Selectable fields, including
          * `mediaUri` - percent-encoded URI (RFC 3986)
          * `mediaUriDecoded` - fully decoded URI (might be ambiguous)
          * `mediaType` - media type (RFC 6838)
          * ...
    StringPredicate:
      oneOf:
        - $ref: '#/components/schemas/StringPredicateStartsWith'
        - $ref: '#/components/schemas/StringPredicateStartsNotWith'
        - $ref: '#/components/schemas/StringPredicateEndsWith'
        - $ref: '#/components/schemas/StringPredicateEndsNotWith'
        - $ref: '#/components/schemas/StringPredicateContains'
        - $ref: '#/components/schemas/StringPredicateContainsNot'
        - $ref: '#/components/schemas/StringPredicateMatches'
        - $ref: '#/components/schemas/StringPredicateMatchesNot'
        - $ref: '#/components/schemas/StringPredicateEquals'
        - $ref: '#/components/schemas/StringPredicateEqualsNot'
    StringPredicateStartsWith:
      properties:
        startsWith:
          type: string
      description: Matches the head of a string (case-insensitive)
    StringPredicateStartsNotWith:
      properties:
        startsNotWith:
          type: string
      description: Mismatches the head of a string (case-insensitive)
    StringPredicateEndsWith:
      properties:
        endsWith:
          type: string
      description: Matches the tail of a string (case-insensitive)
    StringPredicateEndsNotWith:
      properties:
        endsNotWith:
          type: string
      description: Mismatches the tail of a string (case-insensitive)
    StringPredicateContains:
      properties:
        contains:
          type: string
      description: Matches the middle of the string with arbitrary head/tail (case-insensitive)
    StringPredicateContainsNot:
      properties:
        containsNot:
          type: string
      description: Mismatches the middle of the string with arbitrary head/tail (case-insensitive)
    StringPredicateMatches:
      properties:
        matches:
          type: string
      description: Matches the whole string (case-insensitive)
    StringPredicateMatchesNot:
      properties:
        matchesNot:
          type: string
      description: Mismatches the whole string (case-insensitive)
    StringPredicateEquals:
      properties:
        equals:
          type: string
      description: Exact match (case-sensitive)
    StringPredicateEqualsNot:
      properties:
        equals:
          type: string
      description: Exact mismatch (case-sensitive)
    TagAvgScoreCount:
      properties:
        fct:
          $ref: '#/components/schemas/TagFacet'
        lbl:
          $ref: '#/components/schemas/TagLabel'
        avg:
          $ref: '#/components/schemas/AvgTagScore'
        cnt:
          $ref: '#/components/schemas/TotalTrackCount'
      required:
        - avg
        - cnt
      description: |
        Selective tag properties (facet, label) with an average score among
        all occurrences and the total number of occurrences.
    TagFacet:
      type: string
      minLength: 1
      example: genre
      description: |
        Non-empty, lowercase, string that defines the facet of a tag.
        Tag facets must not contain any whitespace characters.
    TagFacetCount:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TagFacet'
          - $ref: '#/components/schemas/TotalCount'
      description: |
        Tag facet with the total number of occurrences.
    TagFacetFilter:
      type: array
      items:
        $ref: '#/components/schemas/TagFacet'
      description: |
        Selects a subset of tags per facet. An empty array **excludes**
        all faceted tags whereas a missing/null array **includes** all
        faceted tags.
      example: ['genre', 'comment']
    TagFilter:
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        facets:
          type: array
          items:
            $ref: '#/components/schemas/TagFacet'
          description: |
            A non-empty array will match any of the given facets.
            An empty array will only match unfaceted tags, i.e. tags
            without a facet. A missing/null array will match any tags,
            both with or without a facet.
        label:
          $ref: '#/components/schemas/StringPredicate'
        score:
          $ref: '#/components/schemas/NumericPredicate'
    TagLabel:
      type: string
      minLength: 1
      example: Hip Hop/Rap
      description: |
        Non-empty string that defines the textual content of the tag.
        Tag labels must not contain any leading or trailing whitespace.
    Tags:
      description: |
        A dictionary of tags indexed by facet.

        The empty key "" stands for no facet and contains all plain tags,
        i.e. tags without a facet.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PlainTags'
    TagScore:
      type: number
      format: double
      minimum: 0
      maximum: 1
      example: 0.83
      description: |
        Normalized numeric value between 0 and 1 that assignes a score to the tag.
        If not specified the default score is 1.0, i.e. full score.
    TempoBpm:
      type: number
      format: double
      minimum: 0
      example: 110.67
      description: |
        The tempo measured in `beats per minute` (bpm).
    TimeSignature:
      oneOf:
        - $ref: '#/components/schemas/TimeSignatureTop'
        - $ref: '#/components/schemas/TimeSignatureTopBottom'
      description: |
        The time signature of a track.

        Either an incomplete signature with only the beats per measure
        or a complete signature with both beats per measure and beat
        unit / note value.
    TimeSignatureTop:
      allOf:
        - $ref: '#/components/schemas/BeatsPerMeasure'
    TimeSignatureTopBottom:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/BeatsPerMeasure'
          - $ref: '#/components/schemas/BeatUnit'
      description: |
        An array with exactly 2 elements: The number of beats per measure
        followed by the beat unit.
      example: [3, 4]
    BeatsPerMeasure:
      description: |
        The number of beats in each measure.

        This number appears as the nominator/upper value in the
        stacked notation for time signature.
      allOf:
        - $ref: '#/components/schemas/BeatNumber'
    TimeStamp:
      type: string
      format: date-time
      example: '2018-06-10T12:19:50.758Z'
      description: |
        A time stamp with up to millisecond precision according to RFC 3339.
    TimeStampTicks:
      type: integer
      format: int64
      example: 1578221715728131
      description: |
        A time stamp in microseconds that have passed since 1970-01-01T00:00:00.000000Z.
    TagSortField:
      type: string
      enum:
        - facet
        - label
        - score
        - count
    TagSortOrder:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TagSortField'
          - $ref: '#/components/schemas/SortDirection'
    Title:
      oneOf:
        - $ref: '#/components/schemas/TitleName'
        - type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TitleName'
              - $ref: '#/components/schemas/TitleLevel'
      description: |
        Mandatory name, followed by optional level
    TitleLevel:
      type: integer
      enum: [0, 1, 2, 3]
      description: |
        Optional level that defaults to 0 = main if missing:
          * 0 = main title (default)
          * 1 = subtitle
          * 2 = work title for classical music
          * 3 = movement title for classical music
    TitleName:
      type: string
      minLength: 1
      example: Yellow Submarine
    TotalCount:
      type: integer
      format: int64
      minimum: 0
      example: 1746
      description: |
        Total number of occurrences.
    TotalTrackCount:
      description: |
        Total number of tracks.
      allOf:
        - $ref: '#/components/schemas/TotalCount'
    TrackCollection:
      description: |
        Track properties that are dependent on the collection.
      properties:
        add:
          description: |
            Time stamp since when the track is part of this collection,
            i.e. when it has been added.
          allOf:
            - $ref: '#/components/schemas/TimeStampTicks'
        col:
          $ref: '#/components/schemas/Color'
        plc:
          description: |
            Play count
          type: integer
          format: int64
          minimum: 0
          example: 4
        plt:
          description: |
            Last played time stamp
          allOf:
            - $ref: '#/components/schemas/TimeStampTicks'
        uid:
          $ref: '#/components/schemas/CollectionUid'
      required:
        - add
        - uid
    TrackEntity:
      description: |
        Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/TrackEntityBody'
    TrackEntityBody:
      properties:
        alb:
          $ref: '#/components/schemas/Album'
        act:
          description: |
            An array of actors
          type: array
          items:
            $ref: '#/components/schemas/Actor'
        col:
          description: |
            An array of collections
          type: array
          items:
            $ref: '#/components/schemas/TrackCollection'
        idx:
          $ref: '#/components/schemas/Indexes'
        mrk:
          $ref: '#/components/schemas/Markers'
        rel:
          $ref: '#/components/schemas/Release'
        src:
          description: |
            An array of media sources
          type: array
          items:
            $ref: '#/components/schemas/MediaSource'
        tag:
          $ref: '#/components/schemas/Tags'
        tit:
          description: |
            An array of titles
          type: array
          items:
            $ref: '#/components/schemas/Title'
    TrackIndex:
      allOf:
        - $ref: '#/components/schemas/Index'
    TrackReplacement:
      properties:
        mediaUri:
          $ref: '#/components/schemas/Uri'
        track:
          $ref: '#/components/schemas/TrackEntityBody'
      required:
        - mediaUri
        - track
      description: |
        The URI is used for looking up the existing track (if any) that gets
        replaced.
    TrackSearchAllFilterNode:
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - all
    TrackSearchAnyFilterNode:
      properties:
        any:
          type: array
          items:
            $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - any
    TrackSearchFilterNode:
      oneOf:
        - $ref: '#/components/schemas/TrackSearchPhraseFieldFilterNode'
        - $ref: '#/components/schemas/TrackSearchNumericFieldFilterNode'
        - $ref: '#/components/schemas/TrackSearchTagFilterNode'
        - $ref: '#/components/schemas/TrackSearchMarkerFilterNode'
        - $ref: '#/components/schemas/TrackSearchAllFilterNode'
        - $ref: '#/components/schemas/TrackSearchAnyFilterNode'
        - $ref: '#/components/schemas/TrackSearchNotFilterNode'
    TrackSearchMarkerFilterNode:
      properties:
        tag:
          $ref: '#/components/schemas/MarkerFilter'
      required:
        - tag
    TrackSearchNotFilterNode:
      properties:
        not:
          $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - not
    TrackSearchNumericFieldFilterNode:
      properties:
        numeric:
          $ref: '#/components/schemas/NumericFieldFilter'
      required:
        - numeric
    TrackSearchPhraseFieldFilterNode:
      properties:
        phrase:
          $ref: '#/components/schemas/PhraseFieldFilter'
      required:
        - phrase
    TrackSearchTagFilterNode:
      properties:
        tag:
          $ref: '#/components/schemas/TagFilter'
      required:
        - tag
    TrackSortField:
      type: string
      enum:
        - inCollectionSince
        - lastRevisionedAt
        - mediaUri
        - mediaUriDecoded
        - trackTitle
        - trackArtist
        - trackNumber
        - trackTotal
        - discNumber
        - discTotal
        - albumTitle
        - albumArtist
        - releaseDate
        - musicTempo
        - musicKey
    TrackSortOrder:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TrackSortField'
          - $ref: '#/components/schemas/SortDirection'
    TrackUid:
      allOf:
        - $ref: '#/components/schemas/EntityUid'
    Uri:
      type: string
      minLength: 1
      example: |
        file:///home/user/Music/album%20artist/album%20title/01%20the%20first%20track.mp3
      description: |
        A percent-encoded URI (RFC 3986).
    UriPredicate:
      oneOf:
        - $ref: '#/components/schemas/UriPredicatePrefix'
        - $ref: '#/components/schemas/UriPredicateExact'
    UriPredicatePrefix:
      properties:
        prefix:
          type: string
      description: Matches the head of an URI (case-sensitive)
    UriPredicateExact:
      properties:
        exact:
          type: string
      description: Matches a single URI (case-sensitive)
    UriRelocation:
      properties:
        predicate:
          $ref: '#/components/schemas/UriPredicate'
        replacement:
          type: string
    YYYY:
      type: integer
      format: int32
      minimum: 1
      maximum: 9999
      example: 2019
      description: |
        A 4-digit integer representing a year
    YYYYMMDD:
      type: integer
      format: int32
      minimum: 10000
      maximum: 99999999
      example: 20191124
      description: |
        An 8-digit integer representing a naive date without any time zone information:
        YYYYMMDD = YYYY (year, 4-digits) + MM (month, 2-digits) + DD (day of month, 2 digits):
