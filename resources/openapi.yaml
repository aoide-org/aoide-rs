openapi: 3.0.3
info:
  version: 0.8.0
  title: aoide
  description: Music library management
  license:
    name: AGPL-3.0-or-later
    url: 'https://www.gnu.org/licenses/agpl-3.0.html'
servers:
  - url: 'http://[::1]:8080'
    description: Local development server
tags:
  - name: Collections
  - name: Media Sources
  - name: Media Tracker
  - name: Tracks
  - name: Playlists
  - name: Administration
paths:
  /c:
    get:
      summary: List collections
      description: |
        Load collections that have recently been modified (created/updated).
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionKindQuery'
        - $ref: '#/components/parameters/collectionSummaryQuery'
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      responses:
        '200':
          description: |
            An array of collection entities, optional with a summary.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionWithSummaryEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new collection
      description: |
        Create a new collection.
      tags:
        - Collections
      requestBody:
        description: |
          The new collection.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '201':
          description: |
            The newly created collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /c/{collectionUid}:
    get:
      summary: Load a collection
      description: |
        Load a collection entity referenced by its UID.
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/collectionSummaryQuery'
      responses:
        '200':
          description: |
            The loaded collection entity, optionally with a summary.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionWithSummaryEntity'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a collection
      description: |
        Update a collection entity after validating that the provided `rev`
        matches that of the current entity (optimistic locking).
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/currentEntityRevisionQuery'
      requestBody:
        description: |
          The updated collection entity.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionEntity'
      responses:
        '200':
          description: |
            The updated collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a collection
      description: |
        Delete a collection.
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /c/{collectionUid}/t/resolve:
    post:
      summary: Resolve the UIDs of tracks from a list of media source URIs
      description: |
        Resolve the UID and current revision of tracks from a list of
        media source URIs.

        The result list is unordered and contains only those tracks
        that have been found.
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PercentEncodedUri'
      responses:
        '200':
          description: |
            An array of track [URI, [UID, Revision]] tuples.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  minLength: 2
                  maxLength: 2
                  items:
                    oneOf:
                      - $ref: '#/components/schemas/PercentEncodedUri'
                      - $ref: '#/components/schemas/EntityHeader'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /c/{collectionUid}/t/search:
    post:
      summary: Search collected tracks and their media sources
      description: |
        Search collected tracks and their media sources by evaluating
        filter conditions and sorting the results.
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/resolveMediaSourceUrlFromPathQuery'
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCollectedTracksRequestBody'
      responses:
        '200':
          description: |
            An array of matching tracks in the requested order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchCollectedTracksResponseBody'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /c/{collectionUid}/t/replace:
    post:
      summary: Replace collected tracks and media sources by URI
      description: |
        Create or update multiple, collected tracks and their media sources by locating them
        through their (percent-encoded) URI.
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/replaceCollectedTrackModeQuery'
        - $ref: '#/components/parameters/resolveMediaSourcePathFromUrlQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceCollectedTracksRequestBody'
      responses:
        '200':
          description: |
            Batch operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceCollectedTracksResponseBody'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /c/{collectionUid}/t/import-and-replace:
    post:
      summary: Import and replace collected tracks and media sources by URI
      description: |
        TODO
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/replaceCollectedTrackModeQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAndReplaceCollectedTracksRequestBody'
      responses:
        '200':
          description: |
            Batch operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAndReplaceCollectedTracksResponseBody'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /c/{collectionUid}/t/purge:
    post:
      summary: Purge collected tracks and media sources by URI
      description: |
        Purge multiple, collected tracks and their media sources by locating them
        through their (percent-encoded) URI.
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurgeCollectedTracksRequestBody'
      responses:
        '204':
          description: |
            Batch operation succeeded.
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /c/{collectionUid}/relocate-media-sources:
    post:
      summary: Relocate collected media sources by URI prefix
      description: |
        Relocate media sources with a common URI prefix by replacing
        this prefix in their URI with a new prefix.

        The URI comparison is case-sensitive.
      tags:
        - Media Sources
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelocateCollectedMediaSourcesRequestBody'
      responses:
        '200':
          description: |
            Batch operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelocateCollectedMediaSourcesResponseBody'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /c/{collectionUid}/media-tracker/hash:
    post:
      summary: Crawl through a directory tree and detect changes
      description: |
        Recursively scan a root directory for content changes, i.e.
        added/modified/removed files and directories.

        For each directory a cryptographic hash is calculated and stored in
        the database for further processing, e.g. import of track metadata.
        Results are stored on behalf of the collection.

        Previously digested directories that are not discovered again during
        a subsequent scan are marked and counted as *orphaned*.

        This operation is blocking and locks the database while running.
      tags:
        - Media Tracker
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaTrackerHashRequestBody'
      responses:
        '200':
          description: |
            Operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaTrackerHashResponseBody'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /c/{collectionUid}/media-tracker/import:
    post:
      summary: Import sources from changed directories
      description: |
        Recursively import media sources located in directories
        that have been marked as changed.

        This operation is blocking and locks the database while running.
      tags:
        - Media Tracker
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaTrackerImportRequestBody'
      responses:
        '200':
          description: |
            Operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaTrackerImportResponseBody'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /c/{collectionUid}/media-tracker/untrack:
    post:
      summary: Discard tracked directories and their contents
      description: |
        Recursively purge the tracking status of a directory subtree.

        The media sources (and tracks) that are located in the subtree
        are unaffected. As a result all these media sources and
        corresponding tracks become *untracked*.

        Untracked directories can be re-added by a starting new digest
        operation followed by an import.
      tags:
        - Media Tracker
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaTrackerUntrackRequestBody'
      responses:
        '200':
          description: |
            Operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaTrackerUntrackResponseBody'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /c/{collectionUid}/media-tracker/query-status:
    post:
      summary: Query the aggregated status of tracked directories
      description: |
      tags:
        - Media Tracker
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaTrackerQueryStatusRequestBody'
      responses:
        '200':
          description: |
            Operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaTrackerQueryStatusResponseBody'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /media-tracker/progress:
    get:
      summary: Report the current progress
      description: |
        Show the currently running batch operation (either *hash* or *import*)
        and report the progress so far.

        If no batch operation is running then the string "idle" is returned.
      tags:
        - Media Tracker
      responses:
        '200':
          description: |
            Operation succeeded.
          content:
            application/json:
              schema:
                oneOf:
                  - type: string
                    enum:
                      - idle
                  - type: object
                    properties:
                      hashing:
                        $ref: '#/components/schemas/MediaTrackerHashingProgress'
                  - type: object
                    properties:
                      importing:
                        $ref: '#/components/schemas/MediaTrackerImportingProgress'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /media-tracker/abort:
    post:
      summary: Abort any running tracker task
      description: |
        Aborts a running batch operation before completion.

        This function will be invoked implicitly before shutting down the service.

        Partial results will be saved in the database.
      tags:
        - Media Tracker
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      responses:
        '202':
          description: |
            The operation has been accepted.
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /t/{trackUid}:
    get:
      summary: Load a track
      description: |
        Load a single track entity including its media source.
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '200':
          description: |
            The loaded track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackEntity'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /t/load:
    post:
      summary: Load multiple tracks
      description: |
        Load multiple track entities including their media sources.

        The result may contain fewer tracks than requested if some
        tracks do not exist. The order of the given UIDs is not preserved
        in the result set, i.e. the ordering of tracks is undefined!
      tags:
        - Tracks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TrackUid'
      responses:
        '200':
          description: |
            An unordered array of loaded tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /c/{collectionUid}/p:
    get:
      summary: List collected playlists
      description: |
        Load collected playlists that have recently been modified (created/updated).
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/playlistKindQuery'
        - $ref: '#/components/parameters/paginationOffsetQuery'
        - $ref: '#/components/parameters/paginationLimitQuery'
      responses:
        '200':
          description: |
            An array of playlist entities with a summary of their
            entries.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlaylistWithEntriesSummaryEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new, collected playlist
      description: |
        Create a new playlist in a collection.
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        description: |
          Properties and entries of the new playlist.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
      responses:
        '201':
          description: |
            The newly created playlist entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /p/{playlistUid}:
    get:
      summary: Load a playlist
      description: |
        Load a playlist entity with all entries referenced by its UID.
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/playlistUidPath'
      responses:
        '200':
          description: |
            The loaded playlist entity including all entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistEntity'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a playlist
      description: |
        Update a playlist entity after validating that the provided `header`
        matches that of the current entity (optimistic locking).
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/playlistUidPath'
        - $ref: '#/components/parameters/currentEntityRevisionQuery'
      requestBody:
        description: |
          A playlist entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistEntity'
      responses:
        '200':
          description: |
            The updated playlist entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistWithEntriesSummaryEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a playlist
      description: |
        Delete a playlist.
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/playlistUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /p/{playlistUid}/entries:
    patch:
      summary: Patch playlist entries
      description: |
        Modify the playlist's entries by applying a sequence of operations.
      tags:
        - Playlists
      parameters:
        - $ref: '#/components/parameters/playlistUidPath'
        - $ref: '#/components/parameters/currentEntityRevisionQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PlaylistEntriesPatchOperation'
      responses:
        '200':
          description: |
            The new entity revision.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityRevision'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /about:
    get:
      summary: Report service properties
      tags:
        - Administration
      responses:
        '200':
          description: |
            Command succeeded.
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /storage/cleanse:
    post:
      summary: Cleanse the database(s)
      tags:
        - Administration
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /storage/optimize:
    post:
      summary: Optimize the database(s)
      tags:
        - Administration
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /shutdown:
    post:
      summary: Shut down gracefully
      description: |
        Shut down the server after finishing all pending requests.
      tags:
        - Administration
      responses:
        '202':
          $ref: '#/components/responses/202Accepted'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          $ref: '#/components/responses/502InternalCommunicationError'

components:
  responses:
    201Created:
      description: |
        The resource has been created.
    202Accepted:
      description: |
        The request/command has been accepted.
    204NoContent:
      description: |
        The request/command has been processed, no response available.
    400BadRequest:
      description: |
        The request with the provided parameters was invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: |
        The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    409Conflict:
      description: |
        The specified resource could not be updated or patched due to a conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500InternalServerError:
      description: |
        The server failed to process the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    502InternalCommunicationError:
      description: |
        The server failed to forward the request.
  parameters:
    paginationOffsetQuery:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: |
        Number of items to skip before returning the results or 0 if missing.
    paginationLimitQuery:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: |
        Maximum number of items to return or unlimited if missing.

        When this parameter is specified its value is evaluated and
        applied, i.e. a value of 0 will result in an empty set of
        returned items.
    replaceCollectedTrackModeQuery:
      name: mode
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/ReplaceCollectedTrackMode'
    resolveMediaSourcePathFromUrlQuery:
      name: resolvePathFromUrl
      description: |
        Consider the provided media source path as an URL and
        resolve it according to the collection's media source
        configuration.

        Only supported for local files.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    resolveMediaSourceUrlFromPathQuery:
      name: resolveUrlFromPath
      description: |
        Resolve the actual URL of the media source from the path according
        to the collection's media source configuration.

        Only supported for local files.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    collectionUidPath:
      name: collectionUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/CollectionUid'
      description: |
        The UID of the collection.
    currentEntityRevisionQuery:
      name: rev
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/EntityRevision'
      description: |
        The current entity revision for optimistic locking when
        modifying an entity.
    collectionKindQuery:
      name: kind
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/CollectionKind'
      description: |
        The desired kind of the collection.
    collectionSummaryQuery:
      name: summary
      in: query
      required: false
      description: |
        Request a summary of the collection.
      schema:
        type: boolean
      example: true
    playlistKindQuery:
      name: kind
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/PlaylistKind'
      description: |
        The desired kind of the playlist.
    playlistUidPath:
      name: playlistUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/PlaylistUid'
      description: |
        The UID of the playlist.
    trackUidPath:
      name: trackUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/TrackUid'
      description: |
        The UID of the track.
  schemas:
    Actor:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ActorName'
        kind:
          $ref: '#/components/schemas/ActorKind'
        role:
          $ref: '#/components/schemas/ActorRole'
        roleNotes:
          type: string
      required:
        - name
      description: |
        Named actor, categorized by *kind* and *role*.

        Only a single `summary` name is allowed while both `primary` and `secondary`
        names may appear multiple times.
    ActorName:
      type: string
      minLength: 1
      example: The Beatles
    ActorKind:
      type: integer
      enum: [0, 1, 2]
      default: 0
      description: |
        Optional actor rank that defaults to 0 = summary if missing:
          * 0 = summary actor (default if missing)
          * 1 = primary actor(s)
          * 2 = secondary actor(s)
    ActorRole:
      type: integer
      enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
      default: 0
      description: |
        Optional actor role that defaults to 0 = artist if missing:
          * 0 = Artist (default if missing)
          * 1 = Arranger
          * 2 = Composer
          * 3 = Conductor
          * 4 = DJ Mixer
          * 5 = Engineer
          * 6 = Lyricist
          * 7 = Mixer
          * 8 = Performer
          * 9 = Producer
          * 10 = Publisher
          * 11 = Remixer
          * 12 = Writer
    AlbumKind:
      type: integer
      enum: [0, 1, 2, 3]
      description: |
        * 0 = undefined (default if missing)
        * 1 = Album
        * 2 = Single
        * 3 = Compilation
    Album:
      description: |
        Album properties
      type: object
      properties:
        titles:
          type: array
          description: |
            An array of titles
          items:
            $ref: '#/components/schemas/Title'
        actors:
          type: array
          description: |
            An array of acting participants/people
          items:
            $ref: '#/components/schemas/Actor'
        kind:
          $ref: '#/components/schemas/AlbumKind'
    Artwork:
      description: |
        An image that is embedded in the media content or referenced as
        an external resource by the optional URI. The URI may also select
        one out of multiple embedded resources.

        The optional, embedded thumbnail image can be used to quickly
        display a placeholder before the actual image has been loaded.
      type: object
      properties:
        digest:
          $ref: '#/components/schemas/ImageDigest'
        mediaType:
          $ref: '#/components/schemas/MediaType'
        size:
          $ref: '#/components/schemas/ImageSize'
        thumbnail:
          $ref: '#/components/schemas/ImageThumbnail4x4Rgb8'
        uri:
          $ref: '#/components/schemas/PercentEncodedUri'
    ArtworkColor:
      description: |
        A solid (background) color, e.g. the average color of the artwork image
      allOf:
        - $ref: '#/components/schemas/RgbColor'
    AudioContent:
      type: object
      properties:
        durationMs:
          $ref: '#/components/schemas/DurationMs'
        bitrateBps:
          $ref: '#/components/schemas/BitrateBps'
        channels:
          $ref: '#/components/schemas/Channels'
        encodedBy:
          description: Encoder, either a person or an application
          type: string
          minLength: 1
        encoder:
          description: Encoder settings or configuration
          type: string
          minLength: 1
        loudnessLufs:
          $ref: '#/components/schemas/LoudnessLufs'
        sampleRateHz:
          $ref: '#/components/schemas/SampleRateHz'
    BeatNumber:
      type: integer
      minimum: 0
      maximum: 65535
      example: 3
      description: |
        A number for counting beats in a measure.
    BeatsPerMeasure:
      description: |
        The number of beats in each measure.

        This number appears as the nominator/upper value in the
        stacked notation for time signature.
      allOf:
        - $ref: '#/components/schemas/BeatNumber'
    BeatUnit:
      type: integer
      minimum: 0
      maximum: 65535
      example: 4
      description: |
        The note value that counts as one beat.

        This number appears as the denominator/lower value in the
        stacked notation for time signature.

        Example: 4 for a quarter note
    BitrateBps:
      type: integer
      format: int32
      minimum: 0
      example: 256000
      description: |
        The bit rate in bits per second (bps).
    ChannelCount:
      type: integer
      minimum: 1
      maximum: 65535
      example: 2
    ChannelLayout:
      type: string
      enum:
        - mono
        - dual-mono
        - stereo
        - three
        - four
        - five
        - five-one
        - seven-one
      description: |
        The layout of the channels.

        Each predefined layout implies a number of channels that then
        doesn't need to be specified explicitly.

        Predefined layouts:
          * mono (1 channel)
          * dual-mono (2 channels)
          * stereo (2 channels)
          * three (3 channels)
          * four (4 channels)
          * five (5 channels)
          * five-one (6 channels)
          * seven-one (8 channels)
    Channels:
      description: |
        Either a channel count or a channel layout.
      oneOf:
        - $ref: '#/components/schemas/ChannelCount'
        - $ref: '#/components/schemas/ChannelLayout'
    CollectionEntity:
      description: |
        Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/Collection'
    Collection:
      type: object
      properties:
        title:
          $ref: '#/components/schemas/CollectionTitle'
        kind:
          $ref: '#/components/schemas/CollectionKind'
        notes:
          $ref: '#/components/schemas/CollectionNotes'
        color:
          $ref: '#/components/schemas/Color'
        mediaSourceConfig:
          $ref: '#/components/schemas/CollectionMediaSourceConfig'
      required:
        - title
        - mediaSourceConfig
    CollectionKind:
      type: string
      minLength: 1
      description: |
        A custom identifier to distinguish different kinds of collections.
      example: 'local'
    CollectionMediaSourceConfig:
      properties:
        pathKind:
          $ref: '#/components/schemas/MediaSourcePathKind'
        baseUrl:
          $ref: '#/components/schemas/PercentEncodedUrl'
      required:
        - pathKind
    CollectionTitle:
      type: string
      minLength: 1
      description: |
        A concise title.
      example: 'Collection #1'
    CollectionWithSummary:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            summary:
              $ref: '#/components/schemas/CollectionSummary'
    CollectionWithSummaryEntity:
      description: |
        Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/CollectionWithSummary'
    CollectionSummary:
      type: object
      properties:
        mediaSources:
          $ref: '#/components/schemas/CollectionMediaSourceSummary'
        tracks:
          $ref: '#/components/schemas/CollectionTrackSummary'
        playlists:
          $ref: '#/components/schemas/CollectionPlaylistSummary'
    CollectionMediaSourceSummary:
      type: object
      properties:
        totalCount:
          $ref: '#/components/schemas/TotalMediaSourceCount'
      required:
        - totalCount
    CollectionPlaylistSummary:
      type: object
      properties:
        totalCount:
          $ref: '#/components/schemas/TotalPlaylistCount'
      required:
        - totalCount
    CollectionTrackSummary:
      type: object
      properties:
        totalCount:
          $ref: '#/components/schemas/TotalTrackCount'
      required:
        - totalCount
    CollectionUid:
      allOf:
        - $ref: '#/components/schemas/EntityUid'
    CollectionNotes:
      type: string
      description: |
        Lengthy, personal notes.
      example: 'Lengthy, personal notes'
    Color:
      oneOf:
        - $ref: '#/components/schemas/RgbColorVariant'
        - $ref: '#/components/schemas/ColorIndexVariant'
      description: |
        Either an RGB color value or a color index.
    ColorIndex:
      type: integer
      minimum: 0
      maximum: 65535
      example: 5
      description: |
        A color palette index.
    ColorIndexVariant:
      type: object
      properties:
        idx:
          $ref: '#/components/schemas/ColorIndex'
    MediaDigest:
      description: |
        A crypographic 256-bit hash encoded as *base64url* (RFC 4648) without padding
        that can be used as a fingerprint of arbitrary, variable-length content
        (audio/video/image/text/...).

        The digest should be calculated from the raw stream data (audio/video)
        or image data that is supposed to be read-only and immutable over time.
        Additional metadata like file tags that is modified frequently is not
        suitable to be included in the digest calculation.
      type: string
      format: base64url
      minLength: 42
      maxLength: 43
    ContentMetadataFlags:
      type: integer
      format: i32
      minimum: 0
      maximum: 7
      example: 5
      description: |
        A bitmask for controlling how and if content metadata is re-imported
        from the source.

        Bits:
          - 0x01: Metadata is reliable
          - 0x02: Metadata is locked
          - 0x04: Metadata might be stale

        Unreliable: Parsed from file tags which are considered inaccurate
        and are often imprecise.

        Reliable: Reported by a decoder when opening the audio/video
        stream for reading. Nevertheless different decoders may report
        slightly differing values. Reliable metadata cannot be updated
        by unreliable metadata. Instead it could be marked as *stale* if
        a re-import is desired.

        Locked: Locked metadata will not be updated automatically, independent
        of the *reliable* flag. Neither when parsing file tags nor when decoding
        the audio/video stream. Instead it could be marked as *stale* if a
        re-import is desired.

        STALE: This flag signals that the content metadata should be
        re-imported depending on the reliability flag. Alternatively
        the *stale* flag could be reset manually.
    CueBankIndex:
      type: integer
      format: int32
      minimum: -32368
      maximum: 32767
      example: 0
      description: |
        The bank index.

        Banks are used for distinguishing different kinds of cues.
    CueSlotIndex:
      type: integer
      format: int32
      minimum: -32368
      maximum: 32767
      example: 3
      description: |
        The slot index within a bank.
    DiscIndex:
      allOf:
        - $ref: '#/components/schemas/Index'
    DurationMs:
      type: number
      format: double
      minimum: 0
      example: 210387.576
    EntityHeader:
      type: array
      minItems: 2
      maxItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityUid'
          - $ref: '#/components/schemas/EntityRevision'
    EntityRevision:
      type: integer
      format: int64
      minimum: 1
      example: 3
    EntityUid:
      type: string
      minLength: 32
      maxLength: 33
      example: 4L9v84JeigpHxEdtVHUkL6JASD92sDwdW
      description: A unique identifier (UID) for entities in base-58 encoding.
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: |
            A HTTP status code
        message:
          type: string
          minLength: 1
          description: |
            A textual description of the error.
      required:
        - code
        - message
    FileDirectoryUrl:
      type: string
      minLength: 8
      description: |
        A percent-encoded `file://` URL ending with a trailing `/` that
        locates a directory path on the local file system.
    FilterModifier:
      type: string
      enum:
        - complement
    ImageDigest:
      description: |
        A binary fingerprint encoded as *base64url* (RFC 4648) without padding that
        identifies the contents of an image for cache lookup and to decide about
        modifications, e.g. a SHA256 hash of the raw image data.
      allOf:
        - $ref: '#/components/schemas/MediaDigest'
    ImageThumbnail4x4Rgb8:
      description: |
        A condensed 4x4 thumbnail picture.

        The pixel format is R8G8B8, i.e. 8 bytes per RGB channel. The data layout
        is in row-major order starting in the upper left corner of the image.

        The raw bytes are encoded as *base64url* (RFC 4648) without padding.
      type: string
      format: base64url
      minLength: 64
      maxLength: 64
    ImageSize:
      description: |
        Width and height of an image in pixels
      type: array
      minLength: 2
      maxLength: 2
      items:
        type: integer
        minimum: 1
        maximum: 65535
        example: 600
    Index:
      oneOf:
        - type: integer
          format: int32
          minimum: 0
          description: |
            Identifies the number of the current item.
        - type: array
          minItems: 2
          maxItems: 2
          items:
            type: integer
            format: int32
            minimum: 0
          description: |
            Identifies the number of the current item (1st) and the number of total items (2nd).
    Indexes:
      type: object
      properties:
        track:
          $ref: '#/components/schemas/TrackIndex'
        disc:
          $ref: '#/components/schemas/DiscIndex'
        movement:
          $ref: '#/components/schemas/MovementIndex'
    KeySignatureCode:
      type: integer
      enum:
        [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
        ]
      description: |
        The key signature is denoted by a code with one of the following values:
          * 0 = unknown (default if missing)
          * 1 = C maj
          * 2 = A min
          * 3 = G maj
          * 4 = E min
          * ...
          * 23 = F maj
          * 24 = D min

        The numbering follows the Circle of fifth / Open Key notation in
        clock-wise orientation, alternating between major and minor keys.
    LoudnessLufs:
      type: number
      format: double
      example: -13.4239
      description: |
        Loudness measured in "Loudness Units relative to Full Scale" (LUFS)
        with 1 LU = 1 dB according to ITU-R BS.1770.

        EBU R128 proposes a target level of -23 LUFS while the ReplayGain v2
        specification (RG2) proposes -18 LUFS for achieving similar perceptive
        results compared to ReplayGain v1 (RG1).
    CueFlags:
      type: integer
      format: i32
      minimum: 0
      maximum: 1
      example: 1
      description: |
        A bitmask with flags, e.g. for locking to prevent unintended changes.

        Bits:
          - 0x01: Locked
    CueOutMode:
      enum: [0, 1, 2, 3]
      description: |
        The playback behavior when reaching the out position.

        Possible values:
          * 0 - cont: Continue playback when reaching the out position (default if missing).
          * 1 - stop: Stop playback when reaching the out position.
          * 2 - next: Continue playback at the in position of the cue
                      with the next slot index, i.e. slot index + 1.
                      If next slot is empty or if that cue has no in
                      position then playback continues (default behavior).
          * 3 - loop: Continue playback at the in position when reaching
                      the out position. If no in position is defined then
                      playback continues (default behavior).
        type: integer
    CueLabel:
      type: string
      example: Intro Loop
    CueLabelFilter:
      type: object
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        value:
          $ref: '#/components/schemas/StringPredicate'
    MediaSourceContent:
      allOf:
        - $ref: '#/components/schemas/MediaSourceAudioContent'
    MediaSourceAudioContent:
      type: object
      properties:
        audio:
          $ref: '#/components/schemas/AudioContent'
    MediaSource:
      type: object
      properties:
        collectedAt:
          $ref: '#/components/schemas/DateTime'
        synchronizedAt:
          $ref: '#/components/schemas/DateTime'
        path:
          $ref: '#/components/schemas/MediaSourcePath'
        contentType:
          $ref: '#/components/schemas/MediaType'
        contentDigest:
          $ref: '#/components/schemas/MediaDigest'
        ContentMetadataFlags:
          $ref: '#/components/schemas/ContentMetadataFlags'
        artwork:
          $ref: '#/components/schemas/Artwork'
      additionalProperties:
        $ref: '#/components/schemas/MediaSourceContent'
      required:
        - collectedAt
        - path
        - contentType
    MediaType:
      type: string
      minLength: 1
      example:
      description: |
        A MIME media type string according to RFC 6838.

        If the fundamental type is considered insufficient to specify the
        file's contents and format optionally add a `codecs` parameter
        according to
        https://developer.mozilla.org/docs/Web/Media/Formats/codecs_parameter.

        Examples:
          * audio/flac
          * audio/mp4
          * audio/mp4; codecs=aac
          * audio/mp4; codecs=alac
          * audio/mpeg
          * audio/mpeg; codecs=mp3
          * audio/ogg; codecs=vorbis
          * audio/ogg; codecs=opus
          * audio/opus
    MovementIndex:
      allOf:
        - $ref: '#/components/schemas/Index'
    Metrics:
      type: object
      properties:
        tempoBpm:
          $ref: '#/components/schemas/TempoBpm'
        keyCode:
          $ref: '#/components/schemas/KeySignatureCode'
        timeSignature:
          $ref: '#/components/schemas/TimeSignature'
        flags:
          $ref: '#/components/schemas/MetricsFlags'
      description: |
        Musical signature including tempo/speed, timining, and key.
    MetricsFlags:
      type: integer
      format: i32
      minimum: 0
      maximum: 7
      example: 5
      description: |
        A bitmask for locking selected properties of the musical signature.

        Bits:
          - 0x01: Tempo/BPM is locked
          - 0x02: Key signature is locked
          - 0x04: Time signature is locked

        Example: A value of 3 = 1 | 2 locks both the tempo and the key signature
    DateTimeField:
      type: string
      enum:
        - lastPlayedAt
        - releasedAt
        - sourceCollectedAt
        - sourceSynchronizedAt
    DateTimeFieldFilter:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/DateTimeField'
          - $ref: '#/components/schemas/DateTimePredicate'
    DateTimePredicate:
      oneOf:
        - $ref: '#/components/schemas/DateTimePredicateLessThan'
        - $ref: '#/components/schemas/DateTimePredicateLessOrEqual'
        - $ref: '#/components/schemas/DateTimePredicateGreaterThan'
        - $ref: '#/components/schemas/DateTimePredicateGreaterOrEqual'
        - $ref: '#/components/schemas/DateTimePredicateEqual'
        - $ref: '#/components/schemas/DateTimePredicateNotEqual'
    DateTimePredicateLessThan:
      type: object
      properties:
        lt:
          $ref: '#/components/schemas/DateTime'
      required:
        - lt
    DateTimePredicateLessOrEqual:
      type: object
      properties:
        le:
          $ref: '#/components/schemas/DateTime'
      required:
        - le
    DateTimePredicateGreaterThan:
      type: object
      properties:
        gt:
          $ref: '#/components/schemas/DateTime'
      required:
        - gt
    DateTimePredicateGreaterOrEqual:
      type: object
      properties:
        ge:
          $ref: '#/components/schemas/DateTime'
      required:
        - ge
    DateTimePredicateEqual:
      type: object
      properties:
        eq:
          $ref: '#/components/schemas/DateTime'
    DateTimePredicateNotEqual:
      type: object
      properties:
        ne:
          $ref: '#/components/schemas/DateTime'
    NumericField:
      type: string
      enum:
        - audioBitrateBps
        - audioChannelCount
        - audioDurationMs
        - audioLoudnessLufs
        - audioSampleRateHz
        - discNumber
        - discTotal
        - musicTempoBpm
        - musicKeyCode
        - releaseDate
        - trackNumber
        - trackTotal
    NumericFieldFilter:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/NumericField'
          - $ref: '#/components/schemas/NumericPredicate'
    NumericPredicate:
      oneOf:
        - $ref: '#/components/schemas/NumericPredicateLessThan'
        - $ref: '#/components/schemas/NumericPredicateLessOrEqual'
        - $ref: '#/components/schemas/NumericPredicateGreaterThan'
        - $ref: '#/components/schemas/NumericPredicateGreaterOrEqual'
        - $ref: '#/components/schemas/NumericPredicateEqual'
        - $ref: '#/components/schemas/NumericPredicateNotEqual'
    NumericPredicateLessThan:
      type: object
      properties:
        lt:
          type: number
          format: double
      required:
        - lt
    NumericPredicateLessOrEqual:
      type: object
      properties:
        le:
          type: number
          format: double
      required:
        - le
    NumericPredicateGreaterThan:
      type: object
      properties:
        gt:
          type: number
          format: double
      required:
        - gt
    NumericPredicateGreaterOrEqual:
      type: object
      properties:
        ge:
          type: number
          format: double
      required:
        - ge
    NumericPredicateEqual:
      type: object
      properties:
        eq:
          type: number
          format: double
    NumericPredicateNotEqual:
      type: object
      properties:
        ne:
          type: number
          format: double
    PhraseFieldFilter:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/StringField'
            description: |
              The fields that are matched against the terms. If no fields
              are specified all available string fields are matched.
          - type: array
            items:
              type: string
            description: |
              The terms are concatenated with wildcards, and filtered
              using case-insensitive "contains" semantics for each of the
              selected fields, e.g. "Pa la bell" or "tt ll" both match "Patti
              LaBelle".

              An empty array matches both empty and missing/null fields.
      required:
        - terms
      description: |
        Matches a sequence of terms on any of the given string fields.
        A match for at least one of the fields is sufficient.
    PlainTag:
      description: |
        Either a single label, a single score, or a 2-element array [label, score].
      oneOf:
        - $ref: '#/components/schemas/TagLabel'
        - $ref: '#/components/schemas/TagScore'
        - type: array
          minLength: 2
          maxLength: 2
          items:
            oneOf:
              - $ref: '#/components/schemas/TagLabel'
              - $ref: '#/components/schemas/TagScore'
    PlainTags:
      type: array
      items:
        $ref: '#/components/schemas/PlainTag'
    Playlist:
      type: object
      properties:
        collectedAt:
          $ref: '#/components/schemas/DateTime'
        title:
          $ref: '#/components/schemas/PlaylistTitle'
        color:
          $ref: '#/components/schemas/Color'
        notes:
          $ref: '#/components/schemas/PlaylistNotes'
        kind:
          $ref: '#/components/schemas/PlaylistKind'
        flags:
          $ref: '#/components/schemas/PlaylistFlags'
      required:
        - collectedAt
        - title
    PlaylistEntity:
      description: Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/Playlist'
    PlaylistEntries:
      description: |
        A sequence of playlist entries
      type: array
      items:
        $ref: '#/components/schemas/PlaylistEntry'
    PlaylistEntriesPatchOperation:
      oneOf:
        - type: object
          properties:
            append:
              type: object
              properties:
                entries:
                  type: array
                  items:
                    $ref: '#/components/schemas/PlaylistEntry'
              required:
                - entries
          required:
            - append
        - type: object
          properties:
            prepend:
              type: object
              properties:
                entries:
                  type: array
                  items:
                    $ref: '#/components/schemas/PlaylistEntry'
              required:
                - entries
          required:
            - prepend
        - type: object
          properties:
            insert:
              type: object
              properties:
                before:
                  $ref: '#/components/schemas/PlaylistEntryPosition'
                entries:
                  type: array
                  items:
                    $ref: '#/components/schemas/PlaylistEntry'
              required:
                - before
                - entries
          required:
            - insert
        - type: object
          properties:
            copyAll:
              type: object
              properties:
                sourcePlaylist:
                  $ref: '#/components/schemas/PlaylistRef'
              required:
                - sourcePlaylist
          required:
            - copyAll
        - type: object
          properties:
            move:
              type: object
              properties:
                start:
                  $ref: '#/components/schemas/PlaylistEntryPosition'
                end:
                  $ref: '#/components/schemas/PlaylistEntryPosition'
                delta:
                  $ref: '#/components/schemas/PlaylistEntryPositionDelta'
              required:
                - start
                - end
                - delta
          required:
            - move
        - type: object
          properties:
            remove:
              type: object
              properties:
                start:
                  $ref: '#/components/schemas/PlaylistEntryPosition'
                end:
                  $ref: '#/components/schemas/PlaylistEntryPosition'
              required:
                - start
                - end
          required:
            - remove
        - type: string
          enum:
            - removeAll
            - reverseAll
            - shuffleAll
    PlaylistEntriesSummary:
      type: object
      properties:
        addedAtMinMax:
          description: |
            Minimum (lower bound) and maximum (upper bound) `addedAt`
            time stamp of all playlist entries
          type: array
          minLength: 2
          maxLength: 2
          items:
            $ref: '#/components/schemas/PlaylistEntryAddedAt'
        totalCount:
          description: Number of entries in the playlist
          allOf:
            - $ref: '#/components/schemas/PlaylistEntryCount'
        tracks:
          $ref: '#/components/schemas/PlaylistTracksSummary'
      required:
        - totalCount
        - tracks
    PlaylistEntry:
      type: object
      properties:
        addedAt:
          $ref: '#/components/schemas/PlaylistEntryAddedAt'
        title:
          $ref: '#/components/schemas/PlaylistEntryTitle'
        notes:
          $ref: '#/components/schemas/PlaylistEntryNotes'
        item:
          $ref: '#/components/schemas/PlaylistItem'
      required:
        - item
    PlaylistEntryAddedAt:
      description: |
        Time stamp since when an entry is part of the playlist,
        i.e. when it has been added by the client.
      allOf:
        - $ref: '#/components/schemas/DateTime'
    PlaylistEntryCount:
      type: integer
      format: int64
      minimum: 0
    PlaylistEntryNotes:
      type: string
      description: |
        Lengthy, personal notes.
      example: 'Lengthy, personal notes'
    PlaylistEntryPosition:
      description: |
        0-based position number to locate a playlist entry
      type: integer
      format: int64
      minimum: 0
    PlaylistEntryPositionDelta:
      description: |
        The signed difference between two playlist entry positions
      type: integer
      format: int64
    PlaylistEntryTitle:
      description: Optional playlist entry title
      type: string
      minLength: 1
    PlaylistFlags:
      type: integer
      format: i32
      minimum: 0
      maximum: 1
      example: 1
      description: |
        A bitmask with flags, e.g. for locking to prevent unintended changes.

        Bits:
          - 0x01: Locked
    PlaylistItem:
      oneOf:
        - $ref: '#/components/schemas/PlaylistItemSeparator'
        - $ref: '#/components/schemas/PlaylistTrackItem'
    PlaylistItemSeparator:
      type: string
      enum:
        - separator
    PlaylistKind:
      description: |
        Custom type of to the playlist. This allows 3rd party applications
        to distinguish different kinds of playlists for different purposes
        and depending on their use case, e.g. generated session or history
        playlists for logging all tracks that have been played during this
        session.
      type: string
    PlaylistNotes:
      type: string
      description: |
        Lengthy, personal notes.
      example: 'Lengthy, personal notes'
    PlaylistRef:
      type: object
      properties:
        uid:
          $ref: '#/components/schemas/PlaylistUid'
      required:
        - uid
    PlaylistTitle:
      description: Mandatory playlist title
      type: string
      minLength: 1
    PlaylistTrack:
      description: |
        The UID of the referenced track
      allOf:
        - $ref: '#/components/schemas/TrackUid'
    PlaylistTrackCount:
      description: |
        Number of tracks in the playlist
      allOf:
        - $ref: '#/components/schemas/PlaylistEntryCount'
    PlaylistTrackItem:
      type: object
      properties:
        track:
          $ref: '#/components/schemas/PlaylistTrack'
      required:
        - track
    PlaylistTracksSummary:
      type: object
      properties:
        totalCount:
          $ref: '#/components/schemas/PlaylistTrackCount'
      required:
        - totalCount
    PlaylistUid:
      allOf:
        - $ref: '#/components/schemas/EntityUid'
    PlaylistWithEntriesSummary:
      allOf:
        - $ref: '#/components/schemas/Playlist'
        - type: object
          properties:
            entries:
              $ref: '#/components/schemas/PlaylistEntriesSummary'
    PlaylistWithEntries:
      allOf:
        - $ref: '#/components/schemas/Playlist'
        - type: object
          properties:
            entries:
              $ref: '#/components/schemas/PlaylistEntries'
    PlaylistWithEntriesEntity:
      description: Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/PlaylistWithEntries'
    PlaylistWithEntriesSummaryEntity:
      description: Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/PlaylistWithEntriesSummary'
    PositionMs:
      type: number
      format: double
      example: 210387.576
      description: |
        The position in an audio stream in milliseconds
    PurgeCollectedTracksRequestBody:
      type: array
      items:
        $ref: '#/components/schemas/PercentEncodedUri'
    Release:
      type: object
      properties:
        releasedAt:
          $ref: '#/components/schemas/ReleasedAt'
        releasedBy:
          type: string
          description: |
            Record label or owner
        copyright:
          description: Copyright
          type: string
    ReleasedAt:
      oneOf:
        - $ref: '#/components/schemas/ReleaseDate'
        - $ref: '#/components/schemas/ReleaseDateTime'
    ReleaseDate:
      oneOf:
        - $ref: '#/components/schemas/YYYY'
        - $ref: '#/components/schemas/YYYYMMDD'
    ReleaseDateTime:
      allOf:
        - $ref: '#/components/schemas/DateTime'
    MediaTrackerUntrackRequestBody:
      type: object
      properties:
        rootUrl:
          $ref: '#/components/schemas/FileDirectoryUrl'
        status:
          $ref: '#/components/schemas/MediaTrackerDirTrackingStatus'
      required:
        - rootUrl
    MediaTrackerDirTrackingStatus:
      type: string
      enum:
        - current
        - outdated
        - added
        - modified
        - orphaned
    MediaTrackerUntrackResponseBody:
      type: object
      properties:
        purged:
          type: integer
          minimum: 0
      required:
        - purged
    MediaTrackerQueryStatusRequestBody:
      type: object
      properties:
        rootUrl:
          $ref: '#/components/schemas/FileDirectoryUrl'
    MediaTrackerQueryStatusResponseBody:
      allOf:
        - $ref: '#/components/schemas/MediaTrackerStatusSummary'
    MediaTrackerCompletion:
      type: string
      enum:
        - finished
        - aborted
    MediaTrackerStatusSummary:
      type: object
      properties:
        directories:
          type: object
          properties:
            current:
              type: integer
              minimum: 0
            outdated:
              type: integer
              minimum: 0
            added:
              type: integer
              minimum: 0
            modified:
              type: integer
              minimum: 0
            orphaned:
              type: integer
              minimum: 0
          required:
            - current
            - outdated
            - added
            - modified
            - orphaned
      required:
        - directories
    MediaTrackerImportRequestBody:
      type: object
      properties:
        rootUrl:
          $ref: '#/components/schemas/FileDirectoryUrl'
        importMode:
          $ref: '#/components/schemas/MediaImportMode'
    MediaImportMode:
      type: string
      enum:
        - once
        - modified
        - always
      default: modified
    MediaTrackerImportResponseBody:
      oneOf:
        - type: object
          properties:
            completion:
              $ref: '#/components/schemas/MediaTrackerCompletion'
            summary:
              $ref: '#/components/schemas/MediaTrackerImportSummary'
          required:
            - completion
            - summary
    MediaTrackerImportSummary:
      type: object
      properties:
        directories:
          type: object
          properties:
            confirmed:
              type: number
              format: int
              minimum: 0
            rejected:
              type: number
              format: int
              minimum: 0
            skipped:
              type: number
              format: int
              minimum: 0
          required:
            - confirmed
            - rejected
            - skipped
        tracks:
          type: object
          properties:
            created:
              type: number
              format: int
              minimum: 0
            updated:
              type: number
              format: int
              minimum: 0
            missing:
              type: number
              format: int
              minimum: 0
            unchanged:
              type: number
              format: int
              minimum: 0
            notImported:
              type: number
              format: int
              minimum: 0
            notCreated:
              type: number
              format: int
              minimum: 0
            notUpdated:
              type: number
              format: int
              minimum: 0
          required:
            - created
            - updated
            - missing
            - unchanged
            - notImported
            - notCreated
            - notUpdated
    MediaTrackerImportingProgress:
      allOf:
        - $ref: '#/components/schemas/MediaTrackerImportSummary'
    MediaTrackerHashingProgress:
      type: object
      properties:
        entries:
          type: object
          properties:
            skipped:
              type: number
              format: int
              minimum: 0
            finished:
              type: number
              format: int
              minimum: 0
        directories:
          type: object
          properties:
            finished:
              type: number
              format: int
              minimum: 0
    MediaTrackerHashRequestBody:
      type: object
      properties:
        rootUrl:
          $ref: '#/components/schemas/FileDirectoryUrl'
        maxDepth:
          type: number
          format: int
          minimum: 1
      required:
        - rootUrl
    MediaTrackerHashSummary:
      type: object
      properties:
        current:
          type: number
          format: int
          minimum: 0
        added:
          type: number
          format: int
          minimum: 0
        modified:
          type: number
          format: int
          minimum: 0
        orphaned:
          type: number
          format: int
          minimum: 0
        skipped:
          type: number
          format: int
          minimum: 0
      required:
        - current
        - added
        - modified
        - orphaned
        - skipped
    MediaSourceVirtualFilePath:
        type: string
        minLength: 1
        example: "album artist/album title/01 the first track.mp3"
    MediaSourcePathKind:
      type: integer
      enum: [0, 1, 2, 3]
      description: |
        Optional level that defaults to 0 = main if missing:
          * 0 = percent-encoded URI
          * 1 = percent-encoded URL
          * 2 = percent-encoded "file" URL
          * 3 = portable file path with '/' as path separator
    MediaSourcePath:
      oneOf:
        - $ref: '#/components/schemas/PercentEncodedUri'
        - $ref: '#/components/schemas/PercentEncodedUrl'
        - $ref: '#/components/schemas/MediaSourceVirtualFilePath'
    MediaTrackerHashResponseBody:
      oneOf:
        - type: object
          properties:
            completion:
              $ref: '#/components/schemas/MediaTrackerCompletion'
            summary:
              $ref: '#/components/schemas/MediaTrackerHashSummary'
          required:
            - completion
            - summary
    PercentEncodedUrl:
      allOf:
        - $ref: '#/components/schemas/PercentEncodedUri'
    PercentEncodedUri:
      type: string
      minLength: 1
      example: file:///home/user/Music/album%20artist/album%20title/01%20the%20first%20track.mp3
      description: |
        A percent-encoded URI (RFC 3986).
    RelocateCollectedMediaSourcesRequestBody:
      type: object
      properties:
        oldUriPrefix:
          $ref: '#/components/schemas/PercentEncodedUri'
        newUriPrefix:
          $ref: '#/components/schemas/PercentEncodedUri'
      required:
        - oldUriPrefix
        - newUriPrefix
    RelocateCollectedMediaSourcesResponseBody:
      type: object
      properties:
        replacedCount:
          type: number
          format: int64
      required:
        - replacedCount
    ReplaceCollectedTrackMode:
      type: string
      enum:
        - create-only
        - update-only
        - update-or-create
      example: update-or-create
      default: update-or-create
    ReplaceCollectedTracksRequestBody:
      type: array
      items:
        $ref: '#/components/schemas/Track'
    ImportAndReplaceCollectedTracksRequestBody:
      type: array
      items:
        $ref: '#/components/schemas/PercentEncodedUri'
    ReplaceCollectedTracksResponseBody:
      type: object
      properties:
        created:
          type: array
          items:
            $ref: '#/components/schemas/TrackEntity'
        updated:
          type: array
          items:
            $ref: '#/components/schemas/TrackEntity'
        unchanged:
          type: array
          items:
            $ref: '#/components/schemas/PercentEncodedUri'
        notCreated:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        notUpdated:
          type: array
          items:
            $ref: '#/components/schemas/Track'
    ImportAndReplaceCollectedTracksResponseBody:
      allOf:
        - $ref: '#/components/schemas/ReplaceCollectedTracksResponseBody'
        - type: object
          properties:
            notImported:
              type: array
              items:
                $ref: '#/components/schemas/PercentEncodedUri'
    RgbColor:
      type: string
      minLength: 7
      maxLength: 7
      example: '#808080'
      description: |
        A hexadecimal RGB color code `#RRGGBB` with 8 bits per channel.
    RgbColorVariant:
      type: object
      properties:
        rgb:
          $ref: '#/components/schemas/RgbColor'
    SampleRateHz:
      type: integer
      format: int32
      minimum: 0
      example: 44100
      description: |
        The sample rate in Hertz (Hz).
    SearchCollectedTracksRequestBody:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/TrackSearchFilterNode'
        ordering:
          type: array
          items:
            $ref: '#/components/schemas/TrackSortOrder'
    SearchCollectedTracksResponseBody:
      type: array
      items:
        $ref: '#/components/schemas/TrackEntity'
    SortDirection:
      type: string
      enum:
        - asc
        - dsc
      description: |
        Direction for sorting results.
          * `asc` - ascending
          * `desc` - descending
    StringField:
      type: string
      enum:
        - albumArtist
        - albumTitle
        - sourceType
        - sourcePath
        - trackArtist
        - trackComposer
        - trackTitle
      description: |
        Selectable fields, including
          * `sourceType` - RFC 6838 media type
          * `sourcePath`
          * ...
    StringPredicate:
      oneOf:
        - $ref: '#/components/schemas/StringPredicateStartsWith'
        - $ref: '#/components/schemas/StringPredicateStartsNotWith'
        - $ref: '#/components/schemas/StringPredicateEndsWith'
        - $ref: '#/components/schemas/StringPredicateEndsNotWith'
        - $ref: '#/components/schemas/StringPredicateContains'
        - $ref: '#/components/schemas/StringPredicateContainsNot'
        - $ref: '#/components/schemas/StringPredicateMatches'
        - $ref: '#/components/schemas/StringPredicateMatchesNot'
        - $ref: '#/components/schemas/StringPredicatePrefix'
        - $ref: '#/components/schemas/StringPredicateEquals'
        - $ref: '#/components/schemas/StringPredicateEqualsNot'
    StringPredicateStartsWith:
      type: object
      properties:
        startsWith:
          type: string
      description: Matches the head of a string (case-insensitive)
    StringPredicateStartsNotWith:
      type: object
      properties:
        startsNotWith:
          type: string
      description: Mismatches the head of a string (case-insensitive)
    StringPredicateEndsWith:
      type: object
      properties:
        endsWith:
          type: string
      description: Matches the tail of a string (case-insensitive)
    StringPredicateEndsNotWith:
      type: object
      properties:
        endsNotWith:
          type: string
      description: Mismatches the tail of a string (case-insensitive)
    StringPredicateContains:
      type: object
      properties:
        contains:
          type: string
      description: Matches the middle of the string with arbitrary head/tail (case-insensitive)
    StringPredicateContainsNot:
      type: object
      properties:
        containsNot:
          type: string
      description: Mismatches the middle of the string with arbitrary head/tail (case-insensitive)
    StringPredicateMatches:
      type: object
      properties:
        matches:
          type: string
      description: Matches the whole string (case-insensitive)
    StringPredicateMatchesNot:
      type: object
      properties:
        matchesNot:
          type: string
      description: Mismatches the whole string (case-insensitive)
    StringPredicatePrefix:
      type: object
      properties:
        equals:
          type: string
      description: Prefix match (case-sensitive)
    StringPredicateEquals:
      type: object
      properties:
        equals:
          type: string
      description: Exact match (case-sensitive)
    StringPredicateEqualsNot:
      type: object
      properties:
        equals:
          type: string
      description: Exact mismatch (case-sensitive)
    TagFacet:
      type: string
      minLength: 1
      example: genre
      description: |
        Non-empty, lowercase, string that defines the facet of a tag.
        Tag facets must not contain any whitespace characters.
    TagFilter:
      type: object
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        facets:
          type: array
          items:
            $ref: '#/components/schemas/TagFacet'
          description: |
            A non-empty array will match any of the given facets.
            An empty array will only match unfaceted tags, i.e. tags
            without a facet. A missing/null array will match any tags,
            both with or without a facet.
        label:
          $ref: '#/components/schemas/StringPredicate'
        score:
          $ref: '#/components/schemas/NumericPredicate'
    TagLabel:
      type: string
      minLength: 1
      example: Hip Hop/Rap
      description: |
        Non-empty string that defines the textual content of the tag.
        Tag labels must not contain any leading or trailing whitespace.
    Tags:
      description: |
        A dictionary of tags indexed by facet.

        The empty key "" stands for no facet and contains all plain tags,
        i.e. tags without a facet.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PlainTags'
    TagScore:
      type: number
      format: double
      minimum: 0
      maximum: 1
      example: 0.83
      description: |
        Normalized numeric value between 0 and 1 that assigns a score to the tag.
        If not specified the default score is 1.0, i.e. full score.
    TempoBpm:
      type: number
      format: double
      minimum: 0
      example: 110.67
      description: |
        The tempo measured in `beats per minute` (bpm).
    TimeSignature:
      oneOf:
        - $ref: '#/components/schemas/TimeSignatureTop'
        - $ref: '#/components/schemas/TimeSignatureTopBottom'
      description: |
        The time signature of a track.

        Either an incomplete signature with only the beats per measure
        or a complete signature with both beats per measure and beat
        unit / note value.
    TimeSignatureTop:
      allOf:
        - $ref: '#/components/schemas/BeatsPerMeasure'
    TimeSignatureTopBottom:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/BeatsPerMeasure'
          - $ref: '#/components/schemas/BeatUnit'
      description: |
        An array with exactly 2 elements: The number of beats per measure
        followed by the beat unit.
      example: [3, 4]
    DateTime:
      type: string
      format: date-time
      description: |
        A time stamp.

        Values are truncated to millisecond precision.
    Title:
      oneOf:
        - $ref: '#/components/schemas/TitleName'
        - type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TitleName'
              - $ref: '#/components/schemas/TitleKind'
      description: |
        Mandatory name, followed by optional level
    TitleKind:
      type: integer
      enum: [0, 1, 2, 3]
      description: |
        Optional level that defaults to 0 = main if missing:
          * 0 = main title (default)
          * 1 = subtitle
          * 2 = work title for classical music
          * 3 = movement title for classical music
    TitleName:
      type: string
      minLength: 1
      example: Yellow Submarine
    TotalCount:
      type: integer
      format: int64
      minimum: 0
      example: 1746
      description: |
        Total number of occurrences.
    TotalMediaSourceCount:
      description: |
        Total number of media sources.
      allOf:
        - $ref: '#/components/schemas/TotalCount'
    TotalPlaylistCount:
      description: |
        Total number of playlists.
      allOf:
        - $ref: '#/components/schemas/TotalCount'
    TotalTrackCount:
      description: |
        Total number of tracks.
      allOf:
        - $ref: '#/components/schemas/TotalCount'
    TrackEntity:
      description: |
        Entity header followed by entity body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/Track'
    Track:
      type: object
      properties:
        mediaSource:
          $ref: '#/components/schemas/MediaSource'
        tites:
          description: |
            An array of titles
          type: array
          items:
            $ref: '#/components/schemas/Title'
        actors:
          description: |
            An array of actors
          type: array
          items:
            $ref: '#/components/schemas/Actor'
        album:
          $ref: '#/components/schemas/Album'
        release:
          $ref: '#/components/schemas/Release'
        indexes:
          $ref: '#/components/schemas/Indexes'
        metrics:
          $ref: '#/components/schemas/Metrics'
        cues:
          description: |
            An array of cues
          type: array
          items:
            $ref: '#/components/schemas/TrackCue'
        color:
          $ref: '#/components/schemas/Color'
        tags:
          $ref: '#/components/schemas/Tags'
    TrackCue:
      type: object
      properties:
        bankIndex:
          $ref: '#/components/schemas/CueBankIndex'
        slotIndex:
          $ref: '#/components/schemas/CueSlotIndex'
        inPositionMs:
          $ref: '#/components/schemas/PositionMs'
        outPositionMs:
          $ref: '#/components/schemas/PositionMs'
        outMode:
          $ref: '#/components/schemas/CueOutMode'
        label:
          $ref: '#/components/schemas/CueLabel'
        color:
          $ref: '#/components/schemas/Color'
        flags:
          $ref: '#/components/schemas/CueFlags'
    TrackIndex:
      allOf:
        - $ref: '#/components/schemas/Index'
    TrackSearchAllFilterNode:
      type: object
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - all
    TrackSearchAnyFilterNode:
      type: object
      properties:
        any:
          type: array
          items:
            $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - any
    TrackSearchFilterNode:
      oneOf:
        - $ref: '#/components/schemas/TrackSearchPhraseFieldFilterNode'
        - $ref: '#/components/schemas/TrackSearchNumericFieldFilterNode'
        - $ref: '#/components/schemas/TrackSearchDateTimeFieldFilterNode'
        - $ref: '#/components/schemas/TrackSearchConditionFilterNode'
        - $ref: '#/components/schemas/TrackSearchTagFilterNode'
        - $ref: '#/components/schemas/TrackSearchCueLabelFilterNode'
        - $ref: '#/components/schemas/TrackSearchAllFilterNode'
        - $ref: '#/components/schemas/TrackSearchAnyFilterNode'
        - $ref: '#/components/schemas/TrackSearchNotFilterNode'
    TrackSearchCueLabelFilterNode:
      type: object
      properties:
        cueLabel:
          $ref: '#/components/schemas/CueLabelFilter'
      required:
        - cueLabel
    TrackSearchNotFilterNode:
      type: object
      properties:
        not:
          $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - not
    TrackSearchNumericFieldFilterNode:
      type: object
      properties:
        numeric:
          $ref: '#/components/schemas/NumericFieldFilter'
      required:
        - numeric
    TrackSearchDateTimeFieldFilterNode:
      type: object
      properties:
        dateTime:
          $ref: '#/components/schemas/DateTimeFieldFilter'
      required:
        - dateTime
    TrackSearchConditionFilterNode:
      type: string
      enum:
        - sourceTracked
        - sourceUntracked
    TrackSearchPhraseFieldFilterNode:
      type: object
      properties:
        phrase:
          $ref: '#/components/schemas/PhraseFieldFilter'
      required:
        - phrase
    TrackSearchTagFilterNode:
      type: object
      properties:
        tag:
          $ref: '#/components/schemas/TagFilter'
      required:
        - tag
    TrackSortField:
      type: string
      enum:
        - albumArtist
        - albumTitle
        - audioBitrateBps
        - audioChannelCount
        - audioDurationMs
        - audioLoudnessLufs
        - audioSampleRateHz
        - createdAt
        - discNumber
        - discTotal
        - lastPlayedAt
        - musicTempoBpm
        - musicKeyCode
        - releaseDate
        - sourceCollectedAt
        - sourceSynchronizedAt
        - sourceType
        - sourcePath
        - timesPlayed
        - trackArtist
        - trackNumber
        - trackTitle
        - trackTotal
        - updatedAt
    TrackSortOrder:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TrackSortField'
          - $ref: '#/components/schemas/SortDirection'
    TrackUid:
      allOf:
        - $ref: '#/components/schemas/EntityUid'
    YYYY:
      type: integer
      format: int32
      minimum: 1
      maximum: 9999
      example: 2019
      description: |
        A 4-digit integer representing a year
    YYYYMMDD:
      type: integer
      format: int32
      minimum: 10000
      maximum: 99999999
      example: 20191124
      description: |
        An 8-digit integer representing a naive date without any time zone information:
        YYYYMMDD = YYYY (year, 4-digits) + MM (month, 2-digits) + DD (day of month, 2 digits):
