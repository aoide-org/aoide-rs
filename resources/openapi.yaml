openapi: 3.0.2
info:
  version: 0.3.2
  title: aoide
  description: Music library management
  license:
    name: AGPL-3.0-or-later
    url: 'https://www.gnu.org/licenses/agpl-3.0.html'
servers:
  - url: 'http://[::1]:8080/'
    description: Local development server
paths:
  /collections:
    get:
      summary: List collections
      description: |
        List all collections that have recently been created/modified.
      operationId: listCollections
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: |
            An array of collection entities sorted in descending order of the
            corresponding time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new collection
      operationId: createCollection
      tags:
        - Collections
      requestBody:
        description: |
          Properties of the new collection.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionEntityBody'
      responses:
        '201':
          description: |
            The header of the newly created collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/collections/{collectionUid}':
    get:
      summary: Load a collection
      description: |
        Load a collection entity referenced by its UID.
      operationId: loadCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
        - $ref: '#/components/parameters/withCollectionQuery'
      responses:
        '200':
          description: |
            The loaded collection entity, optionally with additional statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntityWithStats'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a collection
      description: |
        Update a collection entity after validating that the provided `header`
        matches that of the current entity (optimistic locking).
      operationId: updateCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      requestBody:
        description: |
          A collection entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionEntity'
      responses:
        '200':
          description: |
            The header of the updated collection entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a collection
      operationId: deleteCollection
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks:
    get:
      summary: List tracks
      description: |
        List all tracks that have either recently been created/modified if no
        collection is specified or that have recently been added to the given
        collection.
      operationId: listTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: |
            An array of track entities sorted in descending order of the
            corresponding time stamp.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new track
      operationId: createTrack
      tags:
        - Tracks
      responses:
        '201':
          description: |
            The header of the newly created track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  '/tracks/{trackUid}':
    get:
      summary: Load a track
      description: |
        Load a track entity referenced by its UID.
      operationId: loadTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '200':
          description: |
            The loaded track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackEntity'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a track
      description: |
        Update a track entity after validating that the provided `header`
        matches that of the current entity (optimistic locking).
      operationId: updateTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      requestBody:
        description: |
          A track entity with the current `header` and and updated `body`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackEntity'
      responses:
        '200':
          description: |
            The header of the updated track entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityHeader'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      summary: Delete a track
      operationId: deleteTrack
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/trackUidPath'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/locate:
    post:
      summary: Locate tracks by URI
      description: |
        Locate tracks according to their (percent-encoded) media URI.
        Optionally the URI lookup can be restricted to a single collection.
      operationId: locateTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocateTracksParams'
      responses:
        '200':
          description: |
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/replace:
    post:
      summary: Replace tracks by URI
      description: |
        Replace tracks with a new revision by locating them through their
        (percent-encoded) media URI. Optionally the URI lookup can be
        restricted to a single collection.
      operationId: replaceTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceTracksParams'
      responses:
        '200':
          description: |
            An array of matching tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplacedTracks'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/purge:
    post:
      summary: Purge track sources and tracks by URI
      description: |
        Purge all track sources that equal one of the given URIs.
        If the purged source was the last source of a track the
        entire track is deleted.
      operationId: purgeTrackSources
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurgeTracksParams'
      responses:
        '204':
          description: |
            Track sources and tracks have been purged.
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/relocate:
    post:
      summary: Relocate track sources and tracks by their URI prefixes
      description: |
        Relocate all track sources that equal one of the given URI prefixes.
        Old URI prefixes are replaced by the given new URI prefixes.
      operationId: relocateTrackSources
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelocateTracksParams'
      responses:
        '204':
          description: |
            Track sources have been relocated.
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tracks/search:
    post:
      summary: Search tracks
      description: |
        Search tracks by evaluating various filter conditions and sort the
        results.
      operationId: searchTracks
      tags:
        - Tracks
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchParams'
      responses:
        '200':
          description: |
            An array of matching tracks in the requested order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /albums/count-tracks:
    post:
      summary: Count tracks per album
      description: >
        List albums (title, (main) artist, release year) together with their corresponding number of tracks.
      operationId: countTracksByAlbum
      tags:
        - Albums
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTracksByAlbumParams'
      responses:
        '200':
          description: |
            Album track statistics.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumTrackCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tags/count-tracks:
    post:
      summary: Count tracks per tag
      description: |
        Count the number of occurrences and avg. score of tags
        discriminated by their facet and label. Optionally the
        evaluation can be restricted to a single collection.
      operationId: countTracksByTag
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTracksByTagParams'
      responses:
        '200':
          description: |
            Tag frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /tags/facets/count-tracks:
    post:
      summary: Count tracks per tag facet
      description: |
        Count the number of occurrences of tag facets. Optionally
        the evaluation can be restricted to a single collection.
      operationId: countTracksByTagFacet
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/collectionUidParam'
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTracksByTagFacetParams'
      responses:
        '200':
          description: |
            Tag facet frequencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagFacetCount'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /shutdown:
    post:
      summary: Shut down gracefully
      operationId: shutdown
      tags:
        - Shutdown
      responses:
        '202':
          description: |
            Shutdown has been initiated.
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '502':
          description: |
            Failed to forward the request.
components:
  responses:
    201Created:
      description: |
        The resource has been created.
    204NoContent:
      description: |
        The request has been processed, no response available.
    400BadRequest:
      description: |
        The request with the provided parameters was invalid.
    404NotFound:
      description: |
        The specified resource was not found.
    500InternalServerError:
      description: |
        The server failed to process the request.
  parameters:
    paginationOffset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: |
        Number of items to skip before returning the results or 0 if missing.
    paginationLimit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      description: >
        Maximum number of items to return or unlimited if missing. When this
        parameter

        is specified its value is evaluated and applied, i.e. a value of 0 will
        result

        in an empty set of returned items.
    collectionUidParam:
      name: collectionUid
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/CollectionUid'
      description: |
        An optional UID for selecting a single collection or none for all
        collections.
    collectionUidPath:
      name: collectionUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/CollectionUid'
      description: |
        The UID of the collection.
    trackUidPath:
      name: trackUid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/TrackUid'
      description: |
        The UID of the track.
    withCollectionQuery:
      name: with
      in: query
      required: false
      schema:
        type: string
      description: |
        Comma-separated list of boolean options:
          * `track-stats` - Include track statistics
  schemas:
    Actor:
      oneOf:
        - $ref: '#/components/schemas/ActorName'
        - type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ActorName'
              - $ref: '#/components/schemas/ActorRole'
              - $ref: '#/components/schemas/ActorPrecedence'
      description: |
        Mandatory name, followed by optional role and optional precedence.
        Some actor naming examples for the role _artist_:
          * summary = 'Michael Jackson'
          * summary = 'Bill Medley & Jennifer Warnes', primary = 'Bill Medley', primary = 'Jennifer Warnes'
          * summary = 'Nick Jonas ft. Anne-Marie & Mike Posner', primary = 'Nick Jonas', secondary = 'Anne-Marie', secondary = 'Mike Posner'
    ActorName:
      type: string
      minLength: 1
      example: The Beatles
    ActorPrecedence:
      type: integer
      minimum: 0
      maximum: 2
      description: |
        Optional actor precedence that defaults to 0 = summary if missing:
          * 0 = summary actor
          * 1 = primary actor(s)
          * 2 = secondary actor(s)
    ActorRole:
      type: integer
      minimum: 0
      maximum: 12
      description: |
        Optional actor role that defaults to 0 = artist if missing:
          * 0 = artist
          * 1 = arranger
          * 2 = composer
          * 3 = conductor
          * 4 = djmixer
          * 5 = engineer
          * 6 = lyricist
          * 7 = mixer
          * 8 = performer
          * 9 = producer
          * 10 = publisher
          * 11 = remixer
          * 12 = writer
    Album:
      properties:
        t:
          type: array
          description: |
            An array of titles
          items:
            $ref: '#/components/schemas/Title'
        a:
          type: array
          description: |
            An array of acting participants/people
          items:
            $ref: '#/components/schemas/Actor'
        c:
          type: boolean
          description: |
            Indicates whether this album is a compilation with various artists.
    AlbumTrackCount:
      properties:
        t:
          $ref: '#/components/schemas/TitleName'
        a:
          $ref: '#/components/schemas/ArtistName'
        d:
          $ref: '#/components/schemas/ReleaseDate'
        n:
          $ref: '#/components/schemas/TotalCount'
      required:
        - t
        - n
    ArtistName:
      oneOf:
        - $ref: '#/components/schemas/ActorName'
      example: The Beatles
    ImageSize:
      description: |
        Width and height of an image in pixels
      type: array
      minLength: 2
      maxLength: 2
      items:
        type: integer
        minimum: 1
        maximum: 65535
        example: 600
    Artwork:
      description: |
        An image that is embedded in the media content or referenced as
        an external resource by the optional URI. The URI may also select
        one out of multiple embedded resources.
        The optional background color can be used to quickly display
        a preliminary view before the actual image has been loaded and
        for selecting a matching color scheme.
      properties:
        s:
          $ref: '#/components/schemas/ImageSize'
        f:
          type: string
          description: |
            Fingerprint that identifies the actual content for cache lookup
            and to decide about modifications, e.g. a base64-encoded SHA256
            hash of the image data.
        u:
          $ref: '#/components/schemas/Uri'
        b:
          $ref: '#/components/schemas/BackgroundColor'
      required:
        - s
    AudioContent:
      properties:
        c:
          $ref: '#/components/schemas/Channels'
        d:
          $ref: '#/components/schemas/DurationMs'
        s:
          $ref: '#/components/schemas/SampleRateHz'
        b:
          $ref: '#/components/schemas/BitRateBps'
        l:
          $ref: '#/components/schemas/LoudnessLufs'
        e:
          $ref: '#/components/schemas/Encoder'
    AvgTagScore:
      oneOf:
        - $ref: '#/components/schemas/TagScore'
    BackgroundColor:
      description: |
        A background color color, e.g. the average color of artwork
      oneOf:
        - $ref: '#/components/schemas/Color'
    BeatMarker:
      properties:
        z:
          $ref: '#/components/schemas/MarkerState'
        o:
          $ref: '#/components/schemas/MarkerSource'
        s:
          $ref: '#/components/schemas/PositionMs'
        e:
          $ref: '#/components/schemas/PositionMs'
        b:
          $ref: '#/components/schemas/TempoBpm'
        t:
          $ref: '#/components/schemas/TimeSignature'
        n:
          $ref: '#/components/schemas/BeatNumber'
      required:
        - s
      description: >
        Section of a beat grid with uniform tempo and timiming. Either
        tempo or time signature is required. If the end position is missing
        the section ends with the start of the following marker or at the
        end of the track. The beat number must fit into the time signature.
    BeatNumber:
      type: integer
      minimum: 1
      maximum: 65535
      example: 1
      description: >
        The beat 1..n in a bar.
    BitRateBps:
      type: integer
      format: int32
      minimum: 0
      example: 256000
      description: |
        The bit rate in bits per second (bps).
    ChannelCount:
      type: integer
      minimum: 1
      maximum: 65535
      example: 2
    ChannelLayout:
      type: string
      enum:
        - mono
        - dual-mono
        - stereo
    Channels:
      oneOf:
        - $ref: '#/components/schemas/ChannelCount'
        - $ref: '#/components/schemas/ChannelLayout'
    CollectionEntity:
      description: Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/CollectionEntityBody'
    CollectionEntityBody:
      properties:
        n:
          description: Name
          type: string
          minLength: 1
        d:
          description: Description
          type: string
      required:
        - n
    CollectionEntityWithStats:
      properties:
        entity:
          $ref: '#/components/schemas/CollectionEntity'
        stats:
          $ref: '#/components/schemas/CollectionStats'
    CollectionStats:
      properties:
        tracks:
          $ref: '#/components/schemas/CollectionTrackStats'
    CollectionTrackStats:
      properties:
        totalCount:
          $ref: '#/components/schemas/TotalCount'
      required:
        - totalCount
    CollectionUid:
      oneOf:
        - $ref: '#/components/schemas/EntityUid'
    Color:
      type: string
      minLength: 7
      maxLength: 7
      example: '#808080'
      description: |
        A hexadecimal RGB color code `#RRGGBB` with 8 bits per channel.
    CountTracksByAlbumParams:
      properties:
        minReleaseDate:
          $ref: '#/components/schemas/ReleaseDate'
        maxReleaseDate:
          $ref: '#/components/schemas/ReleaseDate'
        ordering:
          type: array
          items:
            $ref: '#/components/schemas/TrackSortOrder'
      description: >
        Albums can be filtered by release year (inclusive).
        Results can be ordered by album title, album artist, and release year.
    CountTracksByTagFacetParams:
      properties:
        facets:
          $ref: '#/components/schemas/TagFacetFilter'
        ordering:
          type: array
          description: |
            Results can be sorted by facet or count. All other fields are ignored.
          items:
            $ref: '#/components/schemas/TagSortOrder'
    CountTracksByTagParams:
      properties:
        facets:
          $ref: '#/components/schemas/TagFacetFilter'
        includeNonFacetedTags:
          type: boolean
          default: false
          description: |
            Applies the query to all non-faceted tags with no facet
            and just a label. Each distinct label will be scored and
            counted.
        ordering:
          type: array
          description: |
            Results can be sorted by all available fields.
          items:
            $ref: '#/components/schemas/TagSortOrder'
    DiscIndex:
      oneOf:
        - $ref: '#/components/schemas/Index'
    DurationMs:
      type: number
      minimum: 0
      example: 210387.576
    Encoder:
      properties:
        n:
          description: Name
          type: string
          minLength: 1
        s:
          description: Settings
          type: string
    EntityHeader:
      type: array
      minItems: 2
      maxItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityUid'
          - $ref: '#/components/schemas/EntityRevision'
    EntityRevision:
      type: array
      minItems: 2
      maxItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityRevisionVersion'
          - $ref: '#/components/schemas/EntityRevisionInstant'
      description: |
        Tuple of 2 elements containing a version number and a time stamp.
    EntityRevisionInstant:
      type: integer
      format: int64
      example: 1552823952261838
    EntityRevisionVersion:
      type: integer
      format: int64
      minimum: 1
      example: 3
    EntityUid:
      type: string
      minLength: 32
      maxLength: 33
      example: 4L9v84JeigpHxEdtVHUkL6JASD92sDwdW
      description: A unique identifier (UID) for entities in base-58 encoding.
    FacetedTag:
      description: |
        Either a single facet or [facet, score], [facet, label], [facet, label, score].
      oneOf:
        - $ref: '#/components/schemas/TagFacet'
        - type: array
          minLength: 2
          maxLength: 3
          items:
            oneOf:
              - $ref: '#/components/schemas/TagFacet'
              - $ref: '#/components/schemas/TagLabel'
              - $ref: '#/components/schemas/TagScore'
    FacetedTags:
      type: array
      items:
        $ref: '#/components/schemas/FacetedTag'
    FilterModifier:
      type: string
      enum:
        - complement
    Index:
      oneOf:
        - type: integer
          format: int32
          minimum: 0
          description: >
            Identifies the number of the current item.
        - type: array
          minItems: 2
          maxItems: 2
          items:
            type: integer
            format: int32
            minimum: 0
          description: >
            Identifies the number of the current item (1st) and the number of total items (2nd).
    Indexes:
      properties:
        t:
          $ref: '#/components/schemas/TrackIndex'
        d:
          $ref: '#/components/schemas/DiscIndex'
        m:
          $ref: '#/components/schemas/MovementIndex'
    KeyMarker:
      properties:
        z:
          $ref: '#/components/schemas/MarkerState'
        o:
          $ref: '#/components/schemas/MarkerSource'
        s:
          $ref: '#/components/schemas/PositionMs'
        e:
          $ref: '#/components/schemas/PositionMs'
        k:
          $ref: '#/components/schemas/KeySignature'
      required:
        - s
        - k
      description: >
        Section with a uniform musical key signature. If the end position
        is missing the section ends with the start of the following marker
        or at the end of the track.
    KeySignature:
      type: integer
      minimum: 1
      maximum: 24
      example: 1
      description: |
        The key signature is denoted by a code with one of the following values:
          * 1 = C maj
          * 2 = A min
          * 3 = G maj
          * 4 = E min
          * ...
          * 23 = F maj
          * 24 = D min
        The numbering follows the Circle of fifth / Open Key notation in
        clock-wise orientation, alternating between major and minor keys.
    LocateTracksParams:
      properties:
        mediaUri:
          $ref: '#/components/schemas/StringPredicate'
    LoudnessLufs:
      type: number
      example: -13.4239
      description: >
        Loudness is measured in "Loudness Units relative to Full Scale" (LUFS)
        with 1 LU = 1 dB according to ITU-R BS.1770. EBU R128 proposes a target
        level of -23 LUFS while the ReplayGain v2 specification (RG2) proposes
        -18 LUFS for achieving similar perceptive results compared to ReplayGain
        v1 (RG1).
    MarkerFilter:
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        label:
          $ref: '#/components/schemas/StringPredicate'
    MarkerLabel:
      type: string
      example: my marker
    MarkerNumber:
      type: integer
      format: int32
      example: 1
    Markers:
      properties:
        p:
          description: |
            Position markers
          type: array
          items:
            $ref: '#/components/schemas/PositionMarker'
        b:
          description: |
            Beat markers, sorted by their non-overlapping positions
          type: array
          items:
            $ref: '#/components/schemas/BeatMarker'
        k:
          description: |
            Key markers, sorted by their non-overlapping positions
          type: array
          items:
            $ref: '#/components/schemas/KeyMarker'
    MarkerSource:
      description: |
        The source or origin of a marker, e.g. the version of the analyzer
      type: string
      example: analyzer v2.3
    MarkerState:
      description: >
        The (optional) state of a marker
        * `rw` - read/write (default)
        * `ro` - read-only
      type: string
      enum:
        - rw
        - ro
    MediaContent:
      oneOf:
        - type: object
          properties:
            a:
              $ref: '#/components/schemas/AudioContent'
    MediaSource:
      properties:
        u:
          $ref: '#/components/schemas/Uri'
        t:
          $ref: '#/components/schemas/MediaType'
        c:
          $ref: '#/components/schemas/MediaContent'
        a:
          $ref: '#/components/schemas/Artwork'
      required:
        - u
        - t
        - c
    MediaType:
      type: string
      minLength: 1
      example: audio/mpeg
      description: |
        A media type string according to RFC 6838.
    MovementIndex:
      oneOf:
        - $ref: '#/components/schemas/Index'
    NumericField:
      type: string
      enum:
        - audioBitRate
        - audioChannelCount
        - audioDuration
        - audioLoudness
        - audioSampleRate
        - trackNumber
        - trackTotal
        - discNumber
        - discTotal
        - releaseYear
        - musicTempo
        - musicKey
    NumericFieldFilter:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/NumericField'
          - $ref: '#/components/schemas/NumericPredicate'
    NumericPredicate:
      oneOf:
        - $ref: '#/components/schemas/NumericPredicateLessThan'
        - $ref: '#/components/schemas/NumericPredicateLessOrEqual'
        - $ref: '#/components/schemas/NumericPredicateGreaterThan'
        - $ref: '#/components/schemas/NumericPredicateGreaterOrEqual'
        - $ref: '#/components/schemas/NumericPredicateEqual'
        - $ref: '#/components/schemas/NumericPredicateNotEqual'
    NumericPredicateLessThan:
      properties:
        lt:
          type: number
      required:
        - lt
    NumericPredicateLessOrEqual:
      properties:
        le:
          type: number
      required:
        - le
    NumericPredicateGreaterThan:
      properties:
        gt:
          type: number
      required:
        - gt
    NumericPredicateGreaterOrEqual:
      properties:
        ge:
          type: number
      required:
        - ge
    NumericPredicateEqual:
      properties:
        eq:
          type: number
    NumericPredicateNotEqual:
      properties:
        ne:
          type: number
    PhraseFieldFilter:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/StringField'
            description: If no fields are specified all available string fields
              are matched.
          - type: array
            items:
              type: string
            description: >
              The terms are concatenated with wildcards, and filtered
              using case-insensitive "contains" semantics for each of the
              selected fields, e.g. "Pa la bell" or "tt ll" both match "Patti
              LaBelle". An empty array matches both empty and missing/null
              fields.
      required:
        - terms
      description: |
        Matches a sequence of terms on any of the given string fields.
        A match for at least one of the fields is sufficient.
    PlainTag:
      description: |
        Either a single label or [label, score].
      oneOf:
        - $ref: '#/components/schemas/TagLabel'
        - type: array
          minLength: 2
          maxLength: 2
          items:
            oneOf:
              - $ref: '#/components/schemas/TagLabel'
              - $ref: '#/components/schemas/TagScore'
    PlainTags:
      type: array
      items:
        $ref: '#/components/schemas/PlainTag'
    PositionMarker:
      properties:
        t:
          $ref: '#/components/schemas/PositionMarkerType'
        z:
          $ref: '#/components/schemas/MarkerState'
        o:
          $ref: '#/components/schemas/MarkerSource'
        s:
          $ref: '#/components/schemas/PositionMs'
        e:
          $ref: '#/components/schemas/PositionMs'
        n:
          $ref: '#/components/schemas/MarkerNumber'
        l:
          $ref: '#/components/schemas/MarkerLabel'
        c:
          $ref: '#/components/schemas/Color'
      required:
        - t
      description: >
        Marker to identify points (either start or end) or sections (both start
        and end) within a track
    PositionMarkerType:
      description: >
        Multiple position markers of the same type per track are only allowed for non-singular types:
        * `load` - singular initial position when loading a track (and return point after stopping)
        * `main` - singular main audio section (forward only) of the track, i.e. without leading/trailing silence
        * `intro` - singular intro section (forward only) or point of a track for fade-in or mixing
        * `outro` - singular outro section (forward only) or point of a track for fade-out or mixing
        * `jump` - custom start/cue points in a track for direct access while continuing playback, i.e. classical hot cues
        * `loop` - sections that are played as loops (forward or backward)
        * `sample` - sections that are played as samples (forward or backward)
        * `custom` - custom sections (forward only) or points without predefined semantics
      type: string
      enum:
        - load
        - main
        - intro
        - outro
        - jump
        - loop
        - sample
        - custom
    PositionMs:
      type: number
      example: 210387.576
    PurgeTracksParams:
      type: array
      items:
        $ref: '#/components/schemas/UriPredicate'
    Release:
      properties:
        t:
          $ref: '#/components/schemas/ReleasedAt'
        b:
          description: Released by
          type: string
        c:
          description: Copyright
          type: string
        l:
          description: Licenses
          type: array
          items:
            type: string
    ReleasedAt:
      oneOf:
        - $ref: '#/components/schemas/ReleaseDate'
        - $ref: '#/components/schemas/ReleaseDateTime'
    ReleaseDate:
      oneOf:
        - $ref: '#/components/schemas/YYYYMMDD'
    ReleaseDateTime:
      oneOf:
        - $ref: '#/components/schemas/TimeStamp'
    RelocateTracksParams:
      type: array
      items:
        $ref: '#/components/schemas/UriRelocation'
    ReplacedTracks:
      properties:
        created:
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        updated:
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        skipped:
          description: |
            Unchanged tracks that don't need to be updated.
          type: array
          items:
            $ref: '#/components/schemas/EntityHeader'
        rejected:
          description: |
            Informational messages about ambiguous or inconsistent tracks.
          type: array
          items:
            type: string
        discarded:
          description: |
            Informational messages about nonexistent tracks that need to be
            created.
          type: array
          items:
            type: string
    ReplacementMode:
      type: string
      enum:
        - update-only
        - update-or-create
      example: update-or-create
      description: |
        Operational mode for resolving conflicts during replacement
          * `update-only` - only update existing entities and discard new entities that need to be created
          * `update-or-create` - create a new entity if no existing entity could be found/located
    ReplaceTracksParams:
      properties:
        mode:
          $ref: '#/components/schemas/ReplacementMode'
        replacements:
          type: array
          items:
            $ref: '#/components/schemas/TrackReplacement'
    SampleRateHz:
      type: integer
      format: int32
      minimum: 0
      example: 44100
      description: |
        The sample rate in Hertz (Hz).
    SearchParams:
      properties:
        filter:
          $ref: '#/components/schemas/TrackSearchFilterNode'
        ordering:
          type: array
          items:
            $ref: '#/components/schemas/TrackSortOrder'
    SinceTimeStamp:
      oneOf:
        - $ref: '#/components/schemas/TimeStamp'
    SortDirection:
      type: string
      enum:
        - asc
        - dsc
      description: |
        Direction for sorting results.
          * `asc` - ascending
          * `dsc` - descending
    StringField:
      type: string
      enum:
        - mediaUri
        - mediaUriDecoded
        - mediaType
        - trackTitle
        - trackArtist
        - trackComposer
        - albumTitle
        - albumArtist
      description: |
        Selectable fields, including
          * `mediaUri` - percent-encoded URI (RFC 3986)
          * `mediaUriDecoded` - percent-decoded URI
          * `mediaType` - media type (RFC 6838)
          * ...
    StringPredicate:
      oneOf:
        - $ref: '#/components/schemas/StringPredicateStartsWith'
        - $ref: '#/components/schemas/StringPredicateStartsNotWith'
        - $ref: '#/components/schemas/StringPredicateEndsWith'
        - $ref: '#/components/schemas/StringPredicateEndsNotWith'
        - $ref: '#/components/schemas/StringPredicateContains'
        - $ref: '#/components/schemas/StringPredicateContainsNot'
        - $ref: '#/components/schemas/StringPredicateMatches'
        - $ref: '#/components/schemas/StringPredicateMatchesNot'
        - $ref: '#/components/schemas/StringPredicateEquals'
        - $ref: '#/components/schemas/StringPredicateEqualsNot'
    StringPredicateStartsWith:
      properties:
        startsWith:
          type: string
      description: Matches the head of a string (case-insensitive)
    StringPredicateStartsNotWith:
      properties:
        startsNotWith:
          type: string
      description: Mismatches the head of a string (case-insensitive)
    StringPredicateEndsWith:
      properties:
        endsWith:
          type: string
      description: Matches the tail of a string (case-insensitive)
    StringPredicateEndsNotWith:
      properties:
        endsNotWith:
          type: string
      description: Mismatches the tail of a string (case-insensitive)
    StringPredicateContains:
      properties:
        contains:
          type: string
      description: Matches the middle of the string with arbitrary head/tail (case-insensitive)
    StringPredicateContainsNot:
      properties:
        containsNot:
          type: string
      description: Mismatches the middle of the string with arbitrary head/tail (case-insensitive)
    StringPredicateMatches:
      properties:
        matches:
          type: string
      description: Matches the whole string (case-insensitive)
    StringPredicateMatchesNot:
      properties:
        matchesNot:
          type: string
      description: Mismatches the whole string (case-insensitive)
    StringPredicateEquals:
      properties:
        equals:
          type: string
      description: Exact match (case-sensitive)
    StringPredicateEqualsNot:
      properties:
        equals:
          type: string
      description: Exact mismatch (case-sensitive)
    TagCount:
      properties:
        f:
          $ref: '#/components/schemas/TagFacet'
        l:
          $ref: '#/components/schemas/TagLabel'
        s:
          $ref: '#/components/schemas/AvgTagScore'
        n:
          $ref: '#/components/schemas/TotalCount'
      required:
        - s
        - n
      description: >
        Selective tag properties (facet, label) with an average score among
        all occurrences and the total number of occurrences.
    TagFacet:
      type: string
      minLength: 1
      example: genre
      description: |
        Non-empty, lowercase, string that defines the facet of tag.
        Facets must also not contain any whitespace characters.
    TagFacetCount:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TagFacet'
          - $ref: '#/components/schemas/TotalCount'
      description: |
        Tag facet with the total number of occurrences.
    TagFacetFilter:
      type: array
      items:
        $ref: '#/components/schemas/TagFacet'
      description: |
        Selects a subset of tags per facet. An empty array **excludes**
        all faceted tags whereas a missing/null array **includes** all
        faceted tags.
      example: ['genre', 'comment']
    TagFilter:
      properties:
        modifier:
          $ref: '#/components/schemas/FilterModifier'
        facets:
          type: array
          items:
            $ref: '#/components/schemas/TagFacet'
          description: >
            A non-empty array will match any of the given facets.
            An empty array will only match unfaceted tags, i.e. tags
            without a facet. A missing/null array will match any tags,
            both with or without a facet.
        label:
          $ref: '#/components/schemas/StringPredicate'
        score:
          $ref: '#/components/schemas/NumericPredicate'
    TagLabel:
      type: string
      minLength: 1
      example: Hip Hop/Rap
      description: |
        Non-empty string that defines the textual content of the tag.
    Tags:
      description: |
        Tags partitioned into plain (1st) and faceted (2nd) tags.
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/PlainTags'
          - $ref: '#/components/schemas/FacetedTags'
    TagScore:
      type: number
      minimum: 0
      maximum: 1
      example: 0.83
      description: |
        Normalized score value between 0 and 1.
    TempoBpm:
      type: number
      minimum: 0
      example: 110.67
      description: |
        The tempo measured in `beats per minute` (bpm).
    TimeSignature:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TimeSignatureTop'
          - $ref: '#/components/schemas/TimeSignatureBottom'
      description: >
        Tuple of 2 elements containing the top and bottom values of the time
        signature.
    TimeSignatureTop:
      type: integer
      minimum: 1
      maximum: 65535
      example: 3
      description: >
        The top number of the time signature that denotes the number of beats in
        each measure or bar.
    TimeSignatureBottom:
      type: integer
      minimum: 1
      maximum: 65535
      example: 4
      description: >
        The bottom number of the time signature that denotes which type of note
        is getting the beat.
    TimeStamp:
      type: string
      format: date-time
      example: '2018-06-10T12:19:50.758Z'
    TagSortField:
      type: string
      enum:
        - facet
        - label
        - score
        - count
    TagSortOrder:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TagSortField'
          - $ref: '#/components/schemas/SortDirection'
    Title:
      oneOf:
        - $ref: '#/components/schemas/TitleName'
        - type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TitleName'
              - $ref: '#/components/schemas/TitleLevel'
      description: |
        Mandatory name, followed by optional level
    TitleLevel:
      type: integer
      minimum: 0
      maximum: 3
      description: |
        Optional level that defaults to 0 = main if missing:
          * 0 = main title (default)
          * 1 = subtitle
          * 2 = work title for classical music
          * 3 = movement title for classical music
    TitleName:
      type: string
      minLength: 1
      example: Yellow Submarine
    TotalCount:
      type: integer
      format: int64
      minimum: 0
      example: 1746
      description: |
        Total number of occurrences.
    TrackCollection:
      description: |
        Track properties that are dependent on the collection.
      properties:
        u:
          $ref: '#/components/schemas/CollectionUid'
        t:
          $ref: '#/components/schemas/SinceTimeStamp'
        c:
          $ref: '#/components/schemas/Color'
        p:
          description: |
            Play count
          type: integer
          format: int64
          minimum: 0
          example: 4
      required:
        - u
        - t
    TrackEntity:
      description: |
        Entity header and body
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/EntityHeader'
          - $ref: '#/components/schemas/TrackEntityBody'
    TrackEntityBody:
      properties:
        c:
          description: |
            An array of collections
          type: array
          items:
            $ref: '#/components/schemas/TrackCollection'
        s:
          description: |
            An array of media sources
          type: array
          items:
            $ref: '#/components/schemas/MediaSource'
        t:
          description: |
            An array of titles
          type: array
          items:
            $ref: '#/components/schemas/Title'
        p:
          description: |
            An array of acting participants/people
          type: array
          items:
            $ref: '#/components/schemas/Actor'
        a:
          $ref: '#/components/schemas/Album'
        r:
          $ref: '#/components/schemas/Release'
        i:
          $ref: '#/components/schemas/Indexes'
        m:
          $ref: '#/components/schemas/Markers'
        x:
          $ref: '#/components/schemas/Tags'
    TrackIndex:
      oneOf:
        - $ref: '#/components/schemas/Index'
    TrackReplacement:
      properties:
        mediaUri:
          $ref: '#/components/schemas/Uri'
        track:
          $ref: '#/components/schemas/TrackEntityBody'
      required:
        - mediaUri
        - track
      description: |
        The URI is used for looking up the existing track (if any) that gets
        replaced.
    TrackSearchAllFilterNode:
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - all
    TrackSearchAnyFilterNode:
      properties:
        any:
          type: array
          items:
            $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - any
    TrackSearchFilterNode:
      oneOf:
        - $ref: '#/components/schemas/TrackSearchPhraseFieldFilterNode'
        - $ref: '#/components/schemas/TrackSearchNumericFieldFilterNode'
        - $ref: '#/components/schemas/TrackSearchTagFilterNode'
        - $ref: '#/components/schemas/TrackSearchMarkerFilterNode'
        - $ref: '#/components/schemas/TrackSearchAllFilterNode'
        - $ref: '#/components/schemas/TrackSearchAnyFilterNode'
        - $ref: '#/components/schemas/TrackSearchNotFilterNode'
    TrackSearchMarkerFilterNode:
      properties:
        tag:
          $ref: '#/components/schemas/MarkerFilter'
      required:
        - tag
    TrackSearchNotFilterNode:
      properties:
        not:
          $ref: '#/components/schemas/TrackSearchFilterNode'
      required:
        - not
    TrackSearchNumericFieldFilterNode:
      properties:
        numeric:
          $ref: '#/components/schemas/NumericFieldFilter'
      required:
        - numeric
    TrackSearchPhraseFieldFilterNode:
      properties:
        phrase:
          $ref: '#/components/schemas/PhraseFieldFilter'
      required:
        - phrase
    TrackSearchTagFilterNode:
      properties:
        tag:
          $ref: '#/components/schemas/TagFilter'
      required:
        - tag
    TrackSortField:
      type: string
      enum:
        - inCollectionSince
        - lastRevisionedAt
        - mediaUri
        - mediaUriDecoded
        - trackTitle
        - trackArtist
        - trackNumber
        - trackTotal
        - discNumber
        - discTotal
        - albumTitle
        - albumArtist
        - releaseDate
        - musicTempo
        - musicKey
    TrackSortOrder:
      type: array
      minLength: 2
      maxLength: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/TrackSortField'
          - $ref: '#/components/schemas/SortDirection'
    TrackUid:
      oneOf:
        - $ref: '#/components/schemas/EntityUid'
    Uri:
      type: string
      minLength: 1
      example: >-
        file:///home/user/Music/album%20artist/album%20title/01%20the%20first%20track.mp3
      description: |
        A percent-encoded URI (RFC 3986).
    UriPredicate:
      oneOf:
        - $ref: '#/components/schemas/UriPredicatePrefix'
        - $ref: '#/components/schemas/UriPredicateExact'
    UriPredicatePrefix:
      properties:
        prefix:
          type: string
      description: Matches the head of an URI (case-sensitive)
    UriPredicateExact:
      properties:
        exact:
          type: string
      description: Matches a single URI (case-sensitive)
    UriRelocation:
      properties:
        predicate:
          $ref: '#/components/schemas/UriPredicate'
        replacement:
          type: string
    YYYYMMDD:
      type: integer
      format: int32
      minimum: 0
      maximum: 99999999
      example: 20191124
      description: |
        An 8-digit integer representing a naive date without any time zone information:
        YYYYMMDD = YYYY (year, 4-digits) + MM (month, 2-digits) + DD (day of month, 2 digits):
